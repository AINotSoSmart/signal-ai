This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-07-11T15:41:01.468Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.claude/
  settings.local.json
convex/
  _generated/
    api.d.ts
    api.js
    dataModel.d.ts
    server.d.ts
    server.js
  apiKeys.ts
  auth.config.ts
  auth.ts
  crawl.ts
  crons.ts
  emailConfig.ts
  firecrawl.ts
  helpers.ts
  http.ts
  monitoring.ts
  notifications.ts
  README.md
  schema.ts
  tsconfig.json
  users.ts
  webhookPlayground.ts
  websites.ts
public/
  file.svg
  firecrawl.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      test-webhook/
        route.ts
      websites/
        route.ts
    api-docs/
      page.tsx
    settings/
      page.tsx
    style-guide/
      page.tsx
    webhook-playground/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
    providers.tsx
  components/
    layout/
      header.tsx
      hero.tsx
      layout.tsx
    ui/
      button.tsx
      checkbox.tsx
      dropdown-menu.tsx
      input.tsx
      label.tsx
      select.tsx
      textarea.tsx
    ApiKeyManager.tsx
    WebhookConfigModal.tsx
  lib/
    utils.ts
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: .claude/settings.local.json
================
{
  "permissions": {
    "allow": [
      "Bash(echo $SHELL)",
      "Bash(source:*)",
      "Bash(alias cskip)",
      "Bash(exec zsh)",
      "Bash(git rm:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(find:*)",
      "Bash(pnpm build:*)",
      "Bash(pnpm next:*)",
      "Bash(grep:*)"
    ],
    "deny": []
  }
}

================
File: convex/_generated/api.d.ts
================
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  ApiFromModules,
  FilterApi,
  FunctionReference,
} from "convex/server";
import type * as apiKeys from "../apiKeys.js";
import type * as auth from "../auth.js";
import type * as crawl from "../crawl.js";
import type * as crons from "../crons.js";
import type * as emailConfig from "../emailConfig.js";
import type * as firecrawl from "../firecrawl.js";
import type * as helpers from "../helpers.js";
import type * as http from "../http.js";
import type * as monitoring from "../monitoring.js";
import type * as notifications from "../notifications.js";
import type * as users from "../users.js";
import type * as webhookPlayground from "../webhookPlayground.js";
import type * as websites from "../websites.js";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
declare const fullApi: ApiFromModules<{
  apiKeys: typeof apiKeys;
  auth: typeof auth;
  crawl: typeof crawl;
  crons: typeof crons;
  emailConfig: typeof emailConfig;
  firecrawl: typeof firecrawl;
  helpers: typeof helpers;
  http: typeof http;
  monitoring: typeof monitoring;
  notifications: typeof notifications;
  users: typeof users;
  webhookPlayground: typeof webhookPlayground;
  websites: typeof websites;
}>;
export declare const api: FilterApi<
  typeof fullApi,
  FunctionReference<any, "public">
>;
export declare const internal: FilterApi<
  typeof fullApi,
  FunctionReference<any, "internal">
>;

================
File: convex/_generated/api.js
================
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { anyApi } from "convex/server";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
export const api = anyApi;
export const internal = anyApi;

================
File: convex/_generated/dataModel.d.ts
================
/* eslint-disable */
/**
 * Generated data model types.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  DataModelFromSchemaDefinition,
  DocumentByName,
  TableNamesInDataModel,
  SystemTableNames,
} from "convex/server";
import type { GenericId } from "convex/values";
import schema from "../schema.js";

/**
 * The names of all of your Convex tables.
 */
export type TableNames = TableNamesInDataModel<DataModel>;

/**
 * The type of a document stored in Convex.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Doc<TableName extends TableNames> = DocumentByName<
  DataModel,
  TableName
>;

/**
 * An identifier for a document in Convex.
 *
 * Convex documents are uniquely identified by their `Id`, which is accessible
 * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
 *
 * Documents can be loaded using `db.get(id)` in query and mutation functions.
 *
 * IDs are just strings at runtime, but this type can be used to distinguish them from other
 * strings when type checking.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Id<TableName extends TableNames | SystemTableNames> =
  GenericId<TableName>;

/**
 * A type describing your Convex data model.
 *
 * This type includes information about what tables you have, the type of
 * documents stored in those tables, and the indexes defined on them.
 *
 * This type is used to parameterize methods like `queryGeneric` and
 * `mutationGeneric` to make them type-safe.
 */
export type DataModel = DataModelFromSchemaDefinition<typeof schema>;

================
File: convex/_generated/server.d.ts
================
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  ActionBuilder,
  HttpActionBuilder,
  MutationBuilder,
  QueryBuilder,
  GenericActionCtx,
  GenericMutationCtx,
  GenericQueryCtx,
  GenericDatabaseReader,
  GenericDatabaseWriter,
} from "convex/server";
import type { DataModel } from "./dataModel.js";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const query: QueryBuilder<DataModel, "public">;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const internalQuery: QueryBuilder<DataModel, "internal">;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const mutation: MutationBuilder<DataModel, "public">;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const internalMutation: MutationBuilder<DataModel, "internal">;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export declare const action: ActionBuilder<DataModel, "public">;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export declare const internalAction: ActionBuilder<DataModel, "internal">;

/**
 * Define an HTTP action.
 *
 * This function will be used to respond to HTTP requests received by a Convex
 * deployment if the requests matches the path and method where this action
 * is routed. Be sure to route your action in `convex/http.js`.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Import this function from `convex/http.js` and route it to hook it up.
 */
export declare const httpAction: HttpActionBuilder;

/**
 * A set of services for use within Convex query functions.
 *
 * The query context is passed as the first argument to any Convex query
 * function run on the server.
 *
 * This differs from the {@link MutationCtx} because all of the services are
 * read-only.
 */
export type QueryCtx = GenericQueryCtx<DataModel>;

/**
 * A set of services for use within Convex mutation functions.
 *
 * The mutation context is passed as the first argument to any Convex mutation
 * function run on the server.
 */
export type MutationCtx = GenericMutationCtx<DataModel>;

/**
 * A set of services for use within Convex action functions.
 *
 * The action context is passed as the first argument to any Convex action
 * function run on the server.
 */
export type ActionCtx = GenericActionCtx<DataModel>;

/**
 * An interface to read from the database within Convex query functions.
 *
 * The two entry points are {@link DatabaseReader.get}, which fetches a single
 * document by its {@link Id}, or {@link DatabaseReader.query}, which starts
 * building a query.
 */
export type DatabaseReader = GenericDatabaseReader<DataModel>;

/**
 * An interface to read from and write to the database within Convex mutation
 * functions.
 *
 * Convex guarantees that all writes within a single mutation are
 * executed atomically, so you never have to worry about partial writes leaving
 * your data in an inconsistent state. See [the Convex Guide](https://docs.convex.dev/understanding/convex-fundamentals/functions#atomicity-and-optimistic-concurrency-control)
 * for the guarantees Convex provides your functions.
 */
export type DatabaseWriter = GenericDatabaseWriter<DataModel>;

================
File: convex/_generated/server.js
================
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  actionGeneric,
  httpActionGeneric,
  queryGeneric,
  mutationGeneric,
  internalActionGeneric,
  internalMutationGeneric,
  internalQueryGeneric,
} from "convex/server";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const query = queryGeneric;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const internalQuery = internalQueryGeneric;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const mutation = mutationGeneric;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const internalMutation = internalMutationGeneric;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export const action = actionGeneric;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export const internalAction = internalActionGeneric;

/**
 * Define a Convex HTTP action.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument, and a `Request` object
 * as its second.
 * @returns The wrapped endpoint function. Route a URL path to this function in `convex/http.js`.
 */
export const httpAction = httpActionGeneric;

================
File: convex/apiKeys.ts
================
import { v } from "convex/values";
import { mutation, query, internalMutation } from "./_generated/server";
import { requireCurrentUser, getCurrentUser } from "./helpers";

// Generate a random API key
function generateApiKey(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let key = 'fc_';
  for (let i = 0; i < 32; i++) {
    key += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return key;
}

// Get user's API keys
export const getUserApiKeys = query({
  handler: async (ctx) => {
    const user = await getCurrentUser(ctx);
    if (!user) {
      return [];
    }

    const apiKeys = await ctx.db
      .query("apiKeys")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .order("desc")
      .collect();

    // Don't return the full key for security, just the first and last few characters
    return apiKeys.map(key => ({
      _id: key._id,
      name: key.name,
      keyPreview: `${key.key.slice(0, 7)}...${key.key.slice(-4)}`,
      lastUsed: key.lastUsed,
      createdAt: key.createdAt,
    }));
  },
});

// Create a new API key
export const createApiKey = mutation({
  args: {
    name: v.string(),
  },
  handler: async (ctx, args) => {
    const user = await requireCurrentUser(ctx);
    
    // Check if user already has 5 API keys
    const existingKeys = await ctx.db
      .query("apiKeys")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .collect();
    
    if (existingKeys.length >= 5) {
      throw new Error("Maximum of 5 API keys allowed per user");
    }

    const apiKey = generateApiKey();
    
    const keyId = await ctx.db.insert("apiKeys", {
      userId: user._id,
      key: apiKey,
      name: args.name,
      createdAt: Date.now(),
    });

    // Return the full key only on creation
    return {
      _id: keyId,
      key: apiKey,
      name: args.name,
    };
  },
});

// Delete an API key
export const deleteApiKey = mutation({
  args: {
    keyId: v.id("apiKeys"),
  },
  handler: async (ctx, args) => {
    const user = await requireCurrentUser(ctx);
    
    const apiKey = await ctx.db.get(args.keyId);
    if (!apiKey || apiKey.userId !== user._id) {
      throw new Error("API key not found");
    }

    await ctx.db.delete(args.keyId);
  },
});

// Internal function to validate API key and get user
export const validateApiKeyAndGetUser = internalMutation({
  args: { apiKey: v.string() },
  handler: async (ctx, args) => {
    const keyRecord = await ctx.db
      .query("apiKeys")
      .withIndex("by_key", (q) => q.eq("key", args.apiKey))
      .first();
    
    if (!keyRecord) {
      return null;
    }

    // Update last used timestamp
    await ctx.db.patch(keyRecord._id, {
      lastUsed: Date.now(),
    });

    return await ctx.db.get(keyRecord.userId);
  },
});

================
File: convex/auth.config.ts
================
export default {
  providers: [
    {
      domain: process.env.CONVEX_SITE_URL || "http://localhost:3000",
      applicationID: "convex",
    },
  ],
};

================
File: convex/auth.ts
================
import { convexAuth } from "@convex-dev/auth/server";
import { Password } from "@convex-dev/auth/providers/Password";

export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({
  providers: [
    Password(),
  ],
});

================
File: convex/crawl.ts
================
import { v } from "convex/values";
import { internalAction, internalMutation, internalQuery } from "./_generated/server";
import { internal } from "./_generated/api";
import { Id } from "./_generated/dataModel";
import { getFirecrawlClient } from "./firecrawl";

// Perform initial crawl when a full site monitor is created
export const performInitialCrawl = internalAction({
  args: {
    websiteId: v.id("websites"),
    userId: v.id("users"),
  },
  handler: async (ctx, args) => {
    // Get website details
    const website = await ctx.runQuery(internal.websites.getWebsite, {
      websiteId: args.websiteId,
      userId: args.userId,
    });

    if (!website || website.monitorType !== "full_site") {
      throw new Error("Website not found or not a full site monitor");
    }

    // Create crawl session
    const sessionId = await ctx.runMutation(internal.crawl.createCrawlSession, {
      websiteId: args.websiteId,
      userId: args.userId,
    });

    try {
      // Perform the crawl using Firecrawl
      const firecrawl = getFirecrawlClient();
      const crawlResult = await firecrawl.crawlUrl(website.url, {
        limit: website.crawlLimit || 10,
        maxDepth: website.crawlDepth || 3,
        scrapeOptions: {
          formats: ["markdown", "changeTracking"],
        },
      }) as any;

      if (!crawlResult.success) {
        throw new Error(`Firecrawl crawl failed: ${crawlResult.error}`);
      }

      const pages = crawlResult.data || [];
      
      // Store all crawled pages
      for (const page of pages) {
        const pageUrl = page.url || page.metadata?.url;
        if (!pageUrl) continue;

        // Calculate relative path and depth
        const baseUrl = new URL(website.url);
        const pageUrlObj = new URL(pageUrl);
        const relativePath = pageUrlObj.pathname;
        const depth = relativePath.split('/').filter(p => p).length;

        // Store the page
        await ctx.runMutation(internal.crawl.storeCrawledPage, {
          websiteId: args.websiteId,
          crawlSessionId: sessionId,
          url: pageUrl,
          path: relativePath,
          depth: depth,
          status: "found",
          title: page.metadata?.title,
        });

        // Store the scrape result
        if (page.markdown) {
          await ctx.runMutation(internal.websites.storeScrapeResult, {
            websiteId: args.websiteId,
            userId: args.userId,
            markdown: page.markdown,
            changeStatus: page.changeTracking?.changeStatus || "new",
            visibility: page.changeTracking?.visibility || "visible",
            previousScrapeAt: page.changeTracking?.previousScrapeAt
              ? new Date(page.changeTracking.previousScrapeAt).getTime()
              : undefined,
            scrapedAt: Date.now(),
            firecrawlMetadata: page.metadata,
            ogImage: page.metadata?.ogImage,
            title: page.metadata?.title,
            description: page.metadata?.description,
            diff: page.changeTracking?.diff ? {
              text: page.changeTracking.diff.text || "",
              json: page.changeTracking.diff.json || null,
            } : undefined,
          });
        }
      }

      // Complete the crawl session
      await ctx.runMutation(internal.crawl.completeCrawlSession, {
        sessionId,
        pagesFound: pages.length,
        websiteId: args.websiteId,
      });

      // Don't send crawl summary webhook - individual page changes will trigger their own webhooks

      return { success: true, pagesFound: pages.length };
    } catch (error) {
      // Mark session as failed
      await ctx.runMutation(internal.crawl.failCrawlSession, {
        sessionId,
        error: error instanceof Error ? error.message : "Unknown error",
      });
      throw error;
    }
  },
});

// Create a new crawl session
export const createCrawlSession = internalMutation({
  args: {
    websiteId: v.id("websites"),
    userId: v.id("users"),
  },
  handler: async (ctx, args) => {
    return await ctx.db.insert("crawlSessions", {
      websiteId: args.websiteId,
      userId: args.userId,
      startedAt: Date.now(),
      status: "running",
      pagesFound: 0,
    });
  },
});

// Store a crawled page
export const storeCrawledPage = internalMutation({
  args: {
    websiteId: v.id("websites"),
    crawlSessionId: v.id("crawlSessions"),
    url: v.string(),
    path: v.string(),
    depth: v.number(),
    status: v.union(
      v.literal("found"),
      v.literal("changed"),
      v.literal("removed"),
      v.literal("new")
    ),
    title: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    // Check if page already exists
    const existingPage = await ctx.db
      .query("crawledPages")
      .withIndex("by_url", (q) => q.eq("websiteId", args.websiteId).eq("url", args.url))
      .first();

    if (existingPage) {
      // Update existing page
      await ctx.db.patch(existingPage._id, {
        crawlSessionId: args.crawlSessionId,
        status: args.status,
        lastChecked: Date.now(),
        title: args.title,
      });
    } else {
      // Create new page
      await ctx.db.insert("crawledPages", {
        websiteId: args.websiteId,
        crawlSessionId: args.crawlSessionId,
        url: args.url,
        path: args.path,
        depth: args.depth,
        status: args.status,
        lastChecked: Date.now(),
        title: args.title,
      });
    }
  },
});

// Complete a crawl session
export const completeCrawlSession = internalMutation({
  args: {
    sessionId: v.id("crawlSessions"),
    pagesFound: v.number(),
    websiteId: v.id("websites"),
  },
  handler: async (ctx, args) => {
    await ctx.db.patch(args.sessionId, {
      completedAt: Date.now(),
      status: "completed",
      pagesFound: args.pagesFound,
    });

    // Update website with total pages and last crawl time
    await ctx.db.patch(args.websiteId, {
      totalPages: args.pagesFound,
      lastCrawlAt: Date.now(),
      lastChecked: Date.now(),
    });
  },
});

// Mark crawl session as failed
export const failCrawlSession = internalMutation({
  args: {
    sessionId: v.id("crawlSessions"),
    error: v.string(),
  },
  handler: async (ctx, args) => {
    await ctx.db.patch(args.sessionId, {
      completedAt: Date.now(),
      status: "failed",
      error: args.error,
    });
  },
});

// Check all pages in a full site monitor
export const checkCrawledPages = internalAction({
  args: {
    websiteId: v.id("websites"),
    userId: v.id("users"),
  },
  handler: async (ctx, args): Promise<{ pagesChecked: number; errors: number } | undefined> => {
    // Get all crawled pages for this website
    const pages = await ctx.runQuery(internal.crawl.getCrawledPages, {
      websiteId: args.websiteId,
    });

    const website = await ctx.runQuery(internal.websites.getWebsite, {
      websiteId: args.websiteId,
      userId: args.userId,
    });

    if (!website) return;

    // Create a new crawl session for this check
    const sessionId = await ctx.runMutation(internal.crawl.createCrawlSession, {
      websiteId: args.websiteId,
      userId: args.userId,
    });

    let changedCount = 0;
    let errors = 0;

    // Check each page
    for (const page of pages) {
      try {
        // Trigger scrape for each page
        await ctx.scheduler.runAfter(0, internal.firecrawl.scrapeUrl, {
          websiteId: args.websiteId,
          url: page.url,
          userId: args.userId,
        });
        
        // Small delay to avoid rate limiting
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`Error checking page ${page.url}:`, error);
        errors++;
      }
    }

    // Complete the session
    await ctx.runMutation(internal.crawl.completeCrawlSession, {
      sessionId,
      pagesFound: pages.length,
      websiteId: args.websiteId,
    });

    return { 
      pagesChecked: pages.length,
      errors,
    };
  },
});

// Get all crawled pages for a website
export const getCrawledPages = internalQuery({
  args: {
    websiteId: v.id("websites"),
  },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("crawledPages")
      .withIndex("by_website", (q) => q.eq("websiteId", args.websiteId))
      .collect();
  },
});

// Get crawl session by ID
export const getCrawlSession = internalQuery({
  args: {
    sessionId: v.id("crawlSessions"),
  },
  handler: async (ctx, args) => {
    return await ctx.db.get(args.sessionId);
  },
});

// Get crawled pages for a specific session
export const getCrawledPagesForSession = internalQuery({
  args: {
    sessionId: v.id("crawlSessions"),
  },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("crawledPages")
      .withIndex("by_session", (q) => q.eq("crawlSessionId", args.sessionId))
      .collect();
  },
});

================
File: convex/crons.ts
================
import { cronJobs } from "convex/server";
import { internal } from "./_generated/api";

const crons = cronJobs();

// Check all active websites every 15 seconds (for testing)
// Note: In production, this should be set to a more reasonable interval like 5 minutes
crons.interval(
  "check active websites",
  { seconds: 15 },
  internal.monitoring.checkActiveWebsites
);

export default crons;

================
File: convex/emailConfig.ts
================
import { v } from "convex/values";
import { mutation, query, internalQuery } from "./_generated/server";
import { requireCurrentUser, getCurrentUser } from "./helpers";

// Get current user's email config
export const getEmailConfig = query({
  handler: async (ctx) => {
    const user = await getCurrentUser(ctx);
    if (!user) {
      return null;
    }

    const emailConfig = await ctx.db
      .query("emailConfig")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .first();

    return emailConfig;
  },
});

// Save or update email configuration
export const saveEmailConfig = mutation({
  args: {
    email: v.string(),
  },
  handler: async (ctx, args) => {
    const user = await requireCurrentUser(ctx);

    // Check if email config already exists
    const existingConfig = await ctx.db
      .query("emailConfig")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .first();

    if (existingConfig) {
      // Update existing config
      await ctx.db.patch(existingConfig._id, {
        email: args.email,
        isVerified: false, // Reset verification when email changes
        verificationToken: crypto.randomUUID(),
        verificationExpiry: Date.now() + 24 * 60 * 60 * 1000, // 24 hours
        updatedAt: Date.now(),
      });
    } else {
      // Create new config
      await ctx.db.insert("emailConfig", {
        userId: user._id,
        email: args.email,
        isVerified: false,
        verificationToken: crypto.randomUUID(),
        verificationExpiry: Date.now() + 24 * 60 * 60 * 1000, // 24 hours
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
    }

    // TODO: Send verification email using Resend
    return { success: true, message: "Email saved. Please check your inbox for verification." };
  },
});

// Verify email with token
export const verifyEmail = mutation({
  args: {
    token: v.string(),
  },
  handler: async (ctx, args) => {
    const user = await requireCurrentUser(ctx);

    const emailConfig = await ctx.db
      .query("emailConfig")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .first();

    if (!emailConfig) {
      throw new Error("Email configuration not found");
    }

    if (emailConfig.verificationToken !== args.token) {
      throw new Error("Invalid verification token");
    }

    if (emailConfig.verificationExpiry && emailConfig.verificationExpiry < Date.now()) {
      throw new Error("Verification token has expired");
    }

    await ctx.db.patch(emailConfig._id, {
      isVerified: true,
      verificationToken: undefined,
      verificationExpiry: undefined,
      updatedAt: Date.now(),
    });

    return { success: true, message: "Email verified successfully" };
  },
});

// Internal query to get user's email config
export const getUserEmailConfig = internalQuery({
  args: {
    userId: v.id("users"),
  },
  handler: async (ctx, args) => {
    const emailConfig = await ctx.db
      .query("emailConfig")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .first();

    return emailConfig;
  },
});

================
File: convex/firecrawl.ts
================
import { v } from "convex/values";
import { action, internalAction } from "./_generated/server";
import { internal } from "./_generated/api";
import { Id } from "./_generated/dataModel";
import FirecrawlApp from "@mendable/firecrawl-js";
import { requireCurrentUserForAction } from "./helpers";

// Initialize Firecrawl client
export const getFirecrawlClient = () => {
  const apiKey = process.env.FIRECRAWL_API_KEY;
  if (!apiKey) {
    throw new Error("FIRECRAWL_API_KEY is not set");
  }
  return new FirecrawlApp({ apiKey });
};

// Scrape a URL and track changes
export const scrapeUrl = internalAction({
  args: {
    websiteId: v.id("websites"),
    url: v.string(),
    userId: v.id("users"),
  },
  handler: async (ctx, args): Promise<{
    success: boolean;
    scrapeResultId: Id<"scrapeResults">;
    changeStatus: string | undefined;
    visibility: string | undefined;
    previousScrapeAt: string | undefined;
  }> => {
    const firecrawl = getFirecrawlClient();

    try {
      // Scrape with change tracking - markdown is required for changeTracking
      const result = await firecrawl.scrapeUrl(args.url, {
        formats: ["markdown", "changeTracking"],
        changeTrackingOptions: {
          modes: ["git-diff"], // Enable git-diff to see what changed
        }
      }) as any;

      if (!result.success) {
        throw new Error(`Firecrawl scrape failed: ${result.error}`);
      }

      console.log("Full Firecrawl response:", JSON.stringify(result, null, 2));
      
      // Firecrawl returns markdown directly on the result object
      const markdown = result?.markdown || "";
      const changeTracking = result?.changeTracking;
      const metadata = result?.metadata;
      
      console.log("Extracted markdown:", markdown ? `${markdown.substring(0, 100)}...` : "No markdown");
      console.log("Markdown length:", markdown.length);

      // Store the scrape result
      const scrapeResultId = await ctx.runMutation(internal.websites.storeScrapeResult, {
        websiteId: args.websiteId,
        userId: args.userId,
        markdown: markdown,
        changeStatus: changeTracking?.changeStatus || "new",
        visibility: changeTracking?.visibility || "visible",
        previousScrapeAt: changeTracking?.previousScrapeAt
          ? new Date(changeTracking.previousScrapeAt).getTime()
          : undefined,
        scrapedAt: Date.now(),
        firecrawlMetadata: metadata,
        ogImage: metadata?.ogImage || undefined,
        title: metadata?.title || undefined,
        description: metadata?.description || undefined,
        diff: changeTracking?.diff ? {
          text: changeTracking.diff.text || "",
          json: changeTracking.diff.json || null,
        } : undefined,
      }) as Id<"scrapeResults">;

      // If content changed, create an alert and send notifications
      if (changeTracking?.changeStatus === "changed") {
        const diffPreview = changeTracking?.diff?.text ? 
          changeTracking.diff.text.substring(0, 200) + (changeTracking.diff.text.length > 200 ? "..." : "") :
          "Website content has changed since last check";
          
        await ctx.runMutation(internal.websites.createChangeAlert, {
          websiteId: args.websiteId,
          userId: args.userId,
          scrapeResultId,
          changeType: "content_changed",
          summary: diffPreview,
        });

        // Get website details for notifications
        const website = await ctx.runQuery(internal.websites.getWebsite, {
          websiteId: args.websiteId,
          userId: args.userId,
        });

        if (website && website.notificationPreference !== "none") {
          // Send webhook notification
          if ((website.notificationPreference === "webhook" || website.notificationPreference === "both") && website.webhookUrl) {
            await ctx.scheduler.runAfter(0, internal.notifications.sendWebhookNotification, {
              webhookUrl: website.webhookUrl,
              websiteId: args.websiteId,
              websiteName: website.name,
              websiteUrl: args.url, // Use the actual page URL, not the root website URL
              scrapeResultId,
              changeType: "content_changed",
              changeStatus: changeTracking.changeStatus,
              diff: changeTracking?.diff,
              title: metadata?.title,
              description: metadata?.description,
              markdown: markdown,
              scrapedAt: Date.now(),
            });
          }

          // Send email notification
          if (website.notificationPreference === "email" || website.notificationPreference === "both") {
            // Get user's email config
            const emailConfig = await ctx.runQuery(internal.emailConfig.getUserEmailConfig, {
              userId: args.userId,
            });

            if (emailConfig && emailConfig.isVerified) {
              await ctx.scheduler.runAfter(0, internal.notifications.sendEmailNotification, {
                email: emailConfig.email,
                websiteName: website.name,
                websiteUrl: args.url, // Use the actual page URL
                changeType: "content_changed",
                changeStatus: changeTracking.changeStatus,
                diff: changeTracking?.diff,
                title: metadata?.title,
                scrapedAt: Date.now(),
              });
            }
          }
        }
      }

      return {
        success: true,
        scrapeResultId,
        changeStatus: changeTracking?.changeStatus,
        visibility: changeTracking?.visibility,
        previousScrapeAt: changeTracking?.previousScrapeAt,
      };
    } catch (error) {
      console.error("Firecrawl scrape error:", error);
      throw error;
    }
  },
});

// Public action to initiate a manual scrape
export const triggerScrape = action({
  args: {
    websiteId: v.id("websites"),
  },
  handler: async (ctx, args) => {
    const userId = await requireCurrentUserForAction(ctx);

    // Get website details
    const website = await ctx.runQuery(internal.websites.getWebsite, {
      websiteId: args.websiteId,
      userId: userId,
    });

    if (!website) {
      throw new Error("Website not found");
    }

    // Trigger the scrape
    await ctx.scheduler.runAfter(0, internal.firecrawl.scrapeUrl, {
      websiteId: args.websiteId,
      url: website.url,
      userId: userId,
    });

    return { success: true };
  },
});

// Crawl an entire website (for initial setup or full refresh)
export const crawlWebsite = action({
  args: {
    url: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const userId = await requireCurrentUserForAction(ctx);

    const firecrawl = getFirecrawlClient();

    try {
      const crawlResult = await firecrawl.crawlUrl(args.url, {
        limit: args.limit || 10,
        scrapeOptions: {
          formats: ["markdown", "changeTracking"],
        },
      }) as any;

      if (!crawlResult.success) {
        throw new Error(`Firecrawl crawl failed: ${crawlResult.error}`);
      }

      return {
        success: true,
        totalPages: crawlResult.data?.length || 0,
        pages: crawlResult.data?.map((page: any) => ({
          url: page.url,
          title: page.metadata?.title,
          changeStatus: page.changeTracking?.changeStatus,
          visibility: page.changeTracking?.visibility,
        })),
      };
    } catch (error) {
      console.error("Firecrawl crawl error:", error);
      throw error;
    }
  },
});

================
File: convex/helpers.ts
================
import { QueryCtx, MutationCtx, ActionCtx } from "./_generated/server";
import { Doc, Id } from "./_generated/dataModel";
import { api } from "./_generated/api";

export async function getCurrentUser(
  ctx: QueryCtx | MutationCtx
): Promise<Doc<"users"> | null> {
  const identity = await ctx.auth.getUserIdentity();
  if (!identity) {
    return null;
  }

  // The subject contains "userId|sessionId", we need to extract the userId
  const [userId] = identity.subject.split("|");
  
  const user = await ctx.db.get(userId as Id<"users">);
  return user;
}

export async function requireCurrentUser(
  ctx: QueryCtx | MutationCtx
): Promise<Doc<"users">> {
  const user = await getCurrentUser(ctx);
  if (!user) {
    throw new Error("Unauthorized");
  }
  return user;
}

export async function getCurrentUserForAction(
  ctx: ActionCtx
): Promise<Id<"users"> | null> {
  const identity = await ctx.auth.getUserIdentity();
  if (!identity) {
    return null;
  }

  // The subject contains "userId|sessionId", we need to extract the userId
  const [userId] = identity.subject.split("|");
  return userId as Id<"users">;
}

export async function requireCurrentUserForAction(
  ctx: ActionCtx
): Promise<Id<"users">> {
  const userId = await getCurrentUserForAction(ctx);
  if (!userId) {
    throw new Error("Unauthorized");
  }
  return userId;
}

================
File: convex/http.ts
================
import { httpRouter } from "convex/server";
import { httpAction } from "./_generated/server";
import { internal } from "./_generated/api";
import { auth } from "./auth";

const http = httpRouter();

auth.addHttpRoutes(http);

// API endpoint to create websites
http.route({
  path: "/api/create-websites",
  method: "POST",
  handler: httpAction(async (ctx, request) => {
    // Get the authorization header
    const authHeader = request.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return new Response(
        JSON.stringify({ error: "Missing or invalid authorization header" }),
        { status: 401, headers: { "Content-Type": "application/json" } }
      );
    }

    const token = authHeader.substring(7);
    
    // Validate API key and get user
    const user = await ctx.runMutation(internal.apiKeys.validateApiKeyAndGetUser, { apiKey: token });
    
    if (!user) {
      return new Response(
        JSON.stringify({ error: "Invalid API key" }),
        { status: 401, headers: { "Content-Type": "application/json" } }
      );
    }

    try {
      const body = await request.json();
      const isBatch = Array.isArray(body);
      
      if (isBatch) {
        const results = [];
        const errors = [];

        for (let i = 0; i < body.length; i++) {
          const website = body[i];
          
          if (!website.url) {
            errors.push({
              index: i,
              url: website.url || "not provided",
              error: "Missing required field: url"
            });
            continue;
          }

          try {
            // Process the URL
            let processedUrl = website.url.trim();
            if (!processedUrl.match(/^https?:\/\//)) {
              processedUrl = "https://" + processedUrl;
            }

            // Validate URL
            let hostname = "";
            try {
              const urlObj = new URL(processedUrl);
              hostname = urlObj.hostname.replace("www.", "");
            } catch {
              throw new Error(`Invalid URL format: ${website.url}`);
            }

            // Set defaults
            const monitorType = website.type === "crawl" ? "full_site" : "single_page";
            const checkInterval = website.checkInterval || 60;
            const notificationPreference = website.webhook ? "webhook" : "none";
            const crawlLimit = website.crawlLimit || 5;
            const crawlDepth = website.crawlDepth || 3;
            const name = website.name || hostname.charAt(0).toUpperCase() + hostname.slice(1);

            // Create the website
            const websiteId = await ctx.runMutation(internal.websites.createWebsiteFromApi, {
              userId: user._id,
              url: processedUrl,
              name: name,
              checkInterval: checkInterval,
              notificationPreference: notificationPreference,
              webhookUrl: website.webhook || undefined,
              monitorType: monitorType,
              crawlLimit: monitorType === "full_site" ? crawlLimit : undefined,
              crawlDepth: monitorType === "full_site" ? crawlDepth : undefined,
            });

            results.push({
              index: i,
              websiteId: websiteId,
              url: processedUrl,
              name: name,
              type: monitorType,
              checkInterval: checkInterval,
              webhook: website.webhook || null,
            });
          } catch (error: any) {
            errors.push({
              index: i,
              url: website.url,
              error: error.message
            });
          }
        }

        return new Response(
          JSON.stringify({
            success: true,
            message: `Batch request processed. ${results.length} websites added successfully.`,
            results: results,
            errors: errors.length > 0 ? errors : undefined,
            total: body.length,
            successful: results.length,
            failed: errors.length
          }),
          { status: 200, headers: { "Content-Type": "application/json" } }
        );
      } else {
        // Single website request
        if (!body.url) {
          return new Response(
            JSON.stringify({ error: "Missing required field: url" }),
            { status: 400, headers: { "Content-Type": "application/json" } }
          );
        }

        // Process the URL
        let processedUrl = body.url.trim();
        if (!processedUrl.match(/^https?:\/\//)) {
          processedUrl = "https://" + processedUrl;
        }

        // Validate URL
        let hostname = "";
        try {
          const urlObj = new URL(processedUrl);
          hostname = urlObj.hostname.replace("www.", "");
        } catch {
          return new Response(
            JSON.stringify({ error: "Invalid URL format" }),
            { status: 400, headers: { "Content-Type": "application/json" } }
          );
        }

        // Set defaults
        const monitorType = body.type === "crawl" ? "full_site" : "single_page";
        const checkInterval = body.checkInterval || 60;
        const notificationPreference = body.webhook ? "webhook" : "none";
        const crawlLimit = body.crawlLimit || 5;
        const crawlDepth = body.crawlDepth || 3;
        const name = body.name || hostname.charAt(0).toUpperCase() + hostname.slice(1);

        // Create the website
        const websiteId = await ctx.runMutation(internal.websites.createWebsiteFromApi, {
          userId: user._id,
          url: processedUrl,
          name: name,
          checkInterval: checkInterval,
          notificationPreference: notificationPreference,
          webhookUrl: body.webhook || undefined,
          monitorType: monitorType,
          crawlLimit: monitorType === "full_site" ? crawlLimit : undefined,
          crawlDepth: monitorType === "full_site" ? crawlDepth : undefined,
        });

        return new Response(
          JSON.stringify({
            success: true,
            message: "Website added successfully",
            websiteId: websiteId,
            data: {
              url: processedUrl,
              name: name,
              type: monitorType,
              checkInterval: checkInterval,
              webhook: body.webhook || null,
              crawlLimit: monitorType === "full_site" ? crawlLimit : null,
              crawlDepth: monitorType === "full_site" ? crawlDepth : null,
            }
          }),
          { status: 200, headers: { "Content-Type": "application/json" } }
        );
      }
    } catch (error: any) {
      console.error("API error:", error);
      return new Response(
        JSON.stringify({ error: "Internal server error", details: error.message }),
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }
  }),
});

// Webhook proxy endpoint
http.route({
  path: "/api/webhook-proxy",
  method: "POST",
  handler: httpAction(async (ctx, request) => {
    try {
      const body = await request.json();
      const { targetUrl, payload } = body;

      if (!targetUrl || !payload) {
        return new Response(
          JSON.stringify({ error: "Missing targetUrl or payload" }),
          { status: 400, headers: { "Content-Type": "application/json" } }
        );
      }

      // Make the webhook request from the HTTP action
      const response = await fetch(targetUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Firecrawl-Observer/1.0',
        },
        body: JSON.stringify(payload),
      });

      const responseText = await response.text();

      return new Response(
        JSON.stringify({
          success: response.ok,
          status: response.status,
          statusText: response.statusText,
          response: responseText,
        }),
        { 
          status: response.ok ? 200 : 500,
          headers: { "Content-Type": "application/json" }
        }
      );
    } catch (error: any) {
      console.error("Webhook proxy error:", error);
      return new Response(
        JSON.stringify({ error: "Failed to proxy webhook", details: error.message }),
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }
  }),
});

export default http;

================
File: convex/monitoring.ts
================
import { internalAction } from "./_generated/server";
import { internal } from "./_generated/api";

export const checkActiveWebsites = internalAction({
  handler: async (ctx) => {
    // Get all active websites that need checking
    const websites = await ctx.runQuery(internal.monitoring.getWebsitesToCheck);

    console.log(`Checking ${websites.length} websites`);

    // Schedule scrapes for each website
    for (const website of websites) {
      try {
        if (website.monitorType === "full_site") {
          // For full site monitors, check all crawled pages
          await ctx.scheduler.runAfter(0, internal.crawl.checkCrawledPages, {
            websiteId: website._id,
            userId: website.userId,
          });
        } else {
          // For single page monitors, just check the URL
          await ctx.scheduler.runAfter(0, internal.firecrawl.scrapeUrl, {
            websiteId: website._id,
            url: website.url,
            userId: website.userId,
          });
        }
      } catch (error) {
        console.error(`Failed to schedule check for ${website.url}:`, error);
      }
    }
  },
});

// Internal query to get websites that need checking
export const getWebsitesToCheck = internalQuery({
  handler: async (ctx) => {
    const now = Date.now();

    // Get all active websites
    const activeWebsites = await ctx.db
      .query("websites")
      .withIndex("by_active", (q) => q.eq("isActive", true))
      .collect();

    // Filter websites that need checking based on their interval
    const websitesToCheck = activeWebsites.filter((website) => {
      if (!website.lastChecked) {
        // Never checked before
        return true;
      }

      const timeSinceLastCheck = now - website.lastChecked;
      const intervalInMs = website.checkInterval * 60 * 1000;

      return timeSinceLastCheck >= intervalInMs;
    });

    return websitesToCheck;
  },
});

import { internalQuery } from "./_generated/server";

================
File: convex/notifications.ts
================
import { internalAction, internalQuery } from "./_generated/server";
import { v } from "convex/values";
import { internal } from "./_generated/api";

export const sendWebhookNotification = internalAction({
  args: {
    webhookUrl: v.string(),
    websiteId: v.id("websites"),
    websiteName: v.string(),
    websiteUrl: v.string(),
    scrapeResultId: v.id("scrapeResults"),
    changeType: v.string(),
    changeStatus: v.string(),
    diff: v.optional(v.object({
      text: v.string(),
      json: v.any(),
    })),
    title: v.optional(v.string()),
    description: v.optional(v.string()),
    markdown: v.string(),
    scrapedAt: v.number(),
  },
  handler: async (ctx, args) => {
    const payload = {
      event: "website_changed",
      timestamp: new Date().toISOString(),
      website: {
        id: args.websiteId,
        name: args.websiteName,
        url: args.websiteUrl,
      },
      change: {
        detectedAt: new Date(args.scrapedAt).toISOString(),
        changeType: args.changeType,
        changeStatus: args.changeStatus,
        summary: args.diff?.text ? 
          args.diff.text.substring(0, 200) + (args.diff.text.length > 200 ? "..." : "") :
          "Website content has changed",
        diff: args.diff ? {
          added: args.diff.text.split('\n')
            .filter(line => line.startsWith('+') && !line.startsWith('+++'))
            .map(line => line.substring(1)),
          removed: args.diff.text.split('\n')
            .filter(line => line.startsWith('-') && !line.startsWith('---'))
            .map(line => line.substring(1)),
        } : undefined,
      },
      scrapeResult: {
        id: args.scrapeResultId,
        title: args.title,
        description: args.description,
        markdown: args.markdown.substring(0, 1000) + (args.markdown.length > 1000 ? "..." : ""),
      },
    };

    try {
      console.log(`Sending webhook to ${args.webhookUrl}`);
      
      // Check if the webhook URL is localhost or a private network
      const isLocalhost = args.webhookUrl.includes('localhost') || 
                         args.webhookUrl.includes('127.0.0.1') ||
                         args.webhookUrl.includes('0.0.0.0') ||
                         args.webhookUrl.includes('192.168.') ||
                         args.webhookUrl.includes('10.') ||
                         args.webhookUrl.includes('172.');

      if (isLocalhost) {
        // Use the webhook proxy for localhost/private network URLs
        const proxyUrl = `${process.env.CONVEX_SITE_URL}/api/webhook-proxy`;
        console.log(`Using webhook proxy for localhost URL: ${proxyUrl}`);
        
        const response = await fetch(proxyUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            targetUrl: args.webhookUrl,
            payload: payload,
          }),
        });

        if (!response.ok) {
          const errorData = await response.text();
          console.error(`Webhook proxy failed: ${response.status} ${errorData}`);
          throw new Error(`Webhook proxy failed with status ${response.status}`);
        }

        const responseData = await response.json();
        console.log(`Webhook sent successfully via proxy:`, responseData);
        
        return { success: responseData.success, status: responseData.status };
      } else {
        // Direct request for public URLs
        const response = await fetch(args.webhookUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Firecrawl-Observer/1.0',
          },
          body: JSON.stringify(payload),
        });

        if (!response.ok) {
          console.error(`Webhook failed: ${response.status} ${response.statusText}`);
          throw new Error(`Webhook failed with status ${response.status}`);
        }

        const responseData = await response.text();
        console.log(`Webhook sent successfully: ${responseData}`);
        
        return { success: true, status: response.status };
      }
    } catch (error) {
      console.error("Failed to send webhook:", error);
      throw error;
    }
  },
});

export const sendEmailNotification = internalAction({
  args: {
    email: v.string(),
    websiteName: v.string(),
    websiteUrl: v.string(),
    changeType: v.string(),
    changeStatus: v.string(),
    diff: v.optional(v.object({
      text: v.string(),
      json: v.any(),
    })),
    title: v.optional(v.string()),
    scrapedAt: v.number(),
  },
  handler: async (ctx, args) => {
    // TODO: Implement email sending using Resend
    console.log(`Would send email to ${args.email} about changes on ${args.websiteName}`);
    
    // For now, just log the email that would be sent
    const emailContent = {
      to: args.email,
      subject: `Changes detected on ${args.websiteName}`,
      html: `
        <h2>Website Change Alert</h2>
        <p>We've detected changes on the website you're monitoring:</p>
        <div style="background: #f5f5f5; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <h3>${args.websiteName}</h3>
          <p><a href="${args.websiteUrl}">${args.websiteUrl}</a></p>
          <p><strong>Changed at:</strong> ${new Date(args.scrapedAt).toLocaleString()}</p>
          ${args.title ? `<p><strong>Page Title:</strong> ${args.title}</p>` : ''}
        </div>
        <p><a href="${process.env.NEXT_PUBLIC_APP_URL}" style="background: #ff6600; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">View Changes</a></p>
      `
    };
    
    console.log("Email content:", emailContent);
    return { success: true };
  },
});

export const sendCrawlWebhook = internalAction({
  args: {
    webhookUrl: v.string(),
    websiteId: v.id("websites"),
    websiteName: v.string(),
    websiteUrl: v.string(),
    sessionId: v.id("crawlSessions"),
    pagesFound: v.number(),
  },
  handler: async (ctx, args): Promise<{ success: boolean; status: number } | undefined> => {
    // Get crawl session details
    const session = await ctx.runQuery(internal.crawl.getCrawlSession, {
      sessionId: args.sessionId,
    });

    if (!session) return;

    // Get summary of changes
    const crawledPages = await ctx.runQuery(internal.crawl.getCrawledPagesForSession, {
      sessionId: args.sessionId,
    });

    const changedPages = crawledPages.filter((p: any) => p.status === "changed");
    const newPages = crawledPages.filter((p: any) => p.status === "new");
    const removedPages = crawledPages.filter((p: any) => p.status === "removed");

    const payload = {
      event: "crawl_completed",
      timestamp: new Date().toISOString(),
      website: {
        id: args.websiteId,
        name: args.websiteName,
        url: args.websiteUrl,
        type: "full_site",
      },
      crawlSummary: {
        sessionId: args.sessionId,
        startedAt: new Date(session.startedAt).toISOString(),
        completedAt: session.completedAt ? new Date(session.completedAt).toISOString() : null,
        pagesChecked: args.pagesFound,
        pagesChanged: changedPages.length,
        pagesAdded: newPages.length,
        pagesRemoved: removedPages.length,
        duration: session.completedAt ? `${Math.round((session.completedAt - session.startedAt) / 1000)}s` : null,
      },
      changes: [
        ...changedPages.map((p: any) => ({
          url: p.url,
          path: p.path,
          status: "changed",
          title: p.title,
        })),
        ...newPages.map((p: any) => ({
          url: p.url,
          path: p.path,
          status: "added",
          title: p.title,
        })),
        ...removedPages.map((p: any) => ({
          url: p.url,
          path: p.path,
          status: "removed",
          title: p.title,
        })),
      ],
    };

    try {
      console.log(`Sending crawl webhook to ${args.webhookUrl}`);
      
      // Check if the webhook URL is localhost or a private network
      const isLocalhost = args.webhookUrl.includes('localhost') || 
                         args.webhookUrl.includes('127.0.0.1') ||
                         args.webhookUrl.includes('0.0.0.0') ||
                         args.webhookUrl.includes('192.168.') ||
                         args.webhookUrl.includes('10.') ||
                         args.webhookUrl.includes('172.');

      if (isLocalhost) {
        // Use the webhook proxy for localhost/private network URLs
        const proxyUrl = `${process.env.CONVEX_SITE_URL}/api/webhook-proxy`;
        console.log(`Using webhook proxy for localhost URL: ${proxyUrl}`);
        
        const response = await fetch(proxyUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            targetUrl: args.webhookUrl,
            payload: payload,
          }),
        });

        if (!response.ok) {
          const errorData = await response.text();
          console.error(`Crawl webhook proxy failed: ${response.status} ${errorData}`);
          throw new Error(`Webhook proxy failed with status ${response.status}`);
        }

        const responseData = await response.json();
        console.log(`Crawl webhook sent successfully via proxy:`, responseData);
        
        return { success: responseData.success, status: responseData.status };
      } else {
        // Direct request for public URLs
        const response = await fetch(args.webhookUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Firecrawl-Observer/1.0',
          },
          body: JSON.stringify(payload),
        });

        if (!response.ok) {
          console.error(`Crawl webhook failed: ${response.status} ${response.statusText}`);
          throw new Error(`Webhook failed with status ${response.status}`);
        }

        console.log(`Crawl webhook sent successfully`);
        return { success: true, status: response.status };
      }
    } catch (error) {
      console.error("Failed to send crawl webhook:", error);
      throw error;
    }
  },
});

================
File: convex/README.md
================
# Welcome to your Convex functions directory!

Write your Convex functions here.
See https://docs.convex.dev/functions for more.

A query function that takes two arguments looks like:

```ts
// convex/myFunctions.ts
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

Using this query function in a React component looks like:

```ts
const data = useQuery(api.myFunctions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

A mutation function looks like:

```ts
// convex/myFunctions.ts
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

Using this mutation function in a React component looks like:

```ts
const mutation = useMutation(api.myFunctions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

Use the Convex CLI to push your functions to a deployment. See everything
the Convex CLI can do by running `npx convex -h` in your project root
directory. To learn more, launch the docs with `npx convex docs`.

================
File: convex/schema.ts
================
import { defineSchema, defineTable } from "convex/server";
import { authTables } from "@convex-dev/auth/server";
import { v } from "convex/values";

const schema = defineSchema({
  ...authTables,
  
  // API Keys
  apiKeys: defineTable({
    userId: v.id("users"),
    key: v.string(),
    name: v.string(),
    lastUsed: v.optional(v.number()),
    createdAt: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_key", ["key"]),

  // Website monitoring tables
  websites: defineTable({
    url: v.string(),
    name: v.string(),
    userId: v.id("users"),
    isActive: v.boolean(),
    checkInterval: v.number(), // in minutes
    lastChecked: v.optional(v.number()),
    notificationPreference: v.optional(v.union(
      v.literal("none"),
      v.literal("email"),
      v.literal("webhook"),
      v.literal("both")
    )),
    webhookUrl: v.optional(v.string()),
    monitorType: v.optional(v.union(
      v.literal("single_page"),
      v.literal("full_site")
    )),
    crawlLimit: v.optional(v.number()), // max pages to crawl
    crawlDepth: v.optional(v.number()), // max depth to crawl
    lastCrawlAt: v.optional(v.number()),
    totalPages: v.optional(v.number()), // total pages found in last crawl
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_active", ["isActive"]),

  scrapeResults: defineTable({
    websiteId: v.id("websites"),
    userId: v.id("users"),
    markdown: v.string(),
    changeStatus: v.union(
      v.literal("new"),
      v.literal("same"),
      v.literal("changed"),
      v.literal("removed")
    ),
    visibility: v.union(v.literal("visible"), v.literal("hidden")),
    previousScrapeAt: v.optional(v.number()),
    scrapedAt: v.number(),
    firecrawlMetadata: v.optional(v.any()),
    ogImage: v.optional(v.string()),
    title: v.optional(v.string()),
    description: v.optional(v.string()),
    diff: v.optional(v.object({
      text: v.string(),
      json: v.any(),
    })),
  })
    .index("by_website", ["websiteId"])
    .index("by_website_time", ["websiteId", "scrapedAt"])
    .index("by_user_time", ["userId", "scrapedAt"]),

  changeAlerts: defineTable({
    websiteId: v.id("websites"),
    userId: v.id("users"),
    scrapeResultId: v.id("scrapeResults"),
    changeType: v.string(),
    summary: v.string(),
    isRead: v.boolean(),
    createdAt: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_website", ["websiteId"])
    .index("by_read_status", ["userId", "isRead"]),

  emailConfig: defineTable({
    userId: v.id("users"),
    email: v.string(),
    isVerified: v.boolean(),
    verificationToken: v.optional(v.string()),
    verificationExpiry: v.optional(v.number()),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_user", ["userId"])
    .index("by_email", ["email"]),

  webhookPlayground: defineTable({
    payload: v.any(),
    headers: v.any(),
    method: v.string(),
    url: v.string(),
    receivedAt: v.number(),
    status: v.string(),
    response: v.optional(v.any()),
  })
    .index("by_time", ["receivedAt"]),

  crawlSessions: defineTable({
    websiteId: v.id("websites"),
    userId: v.id("users"),
    startedAt: v.number(),
    completedAt: v.optional(v.number()),
    status: v.union(
      v.literal("running"),
      v.literal("completed"),
      v.literal("failed")
    ),
    pagesFound: v.number(),
    pagesChanged: v.optional(v.number()),
    pagesAdded: v.optional(v.number()),
    pagesRemoved: v.optional(v.number()),
    error: v.optional(v.string()),
  })
    .index("by_website", ["websiteId"])
    .index("by_user_time", ["userId", "startedAt"]),

  crawledPages: defineTable({
    websiteId: v.id("websites"),
    crawlSessionId: v.id("crawlSessions"),
    url: v.string(),
    path: v.string(), // relative path from root
    depth: v.number(),
    status: v.union(
      v.literal("found"),
      v.literal("changed"),
      v.literal("removed"),
      v.literal("new")
    ),
    lastChecked: v.number(),
    title: v.optional(v.string()),
    lastScrapeResultId: v.optional(v.id("scrapeResults")),
  })
    .index("by_website", ["websiteId"])
    .index("by_session", ["crawlSessionId"])
    .index("by_url", ["websiteId", "url"]),
});

export default schema;

================
File: convex/tsconfig.json
================
{
  /* This TypeScript project config describes the environment that
   * Convex functions run in and is used to typecheck them.
   * You can modify it, but some settings are required to use Convex.
   */
  "compilerOptions": {
    /* These settings are not required by Convex and can be modified. */
    "allowJs": true,
    "strict": true,
    "moduleResolution": "Bundler",
    "jsx": "react-jsx",
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,

    /* These compiler options are required by Convex */
    "target": "ESNext",
    "lib": ["ES2021", "dom"],
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "isolatedModules": true,
    "noEmit": true
  },
  "include": ["./**/*"],
  "exclude": ["./_generated"]
}

================
File: convex/users.ts
================
import { query } from "./_generated/server";

export const getCurrentUser = query({
  handler: async (ctx) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      return null;
    }

    // Get user from database
    const user = await ctx.db
      .query("users")
      .withIndex("email", (q) => q.eq("email", identity.email!))
      .first();

    if (!user) {
      return null;
    }

    return {
      id: user._id,
      email: user.email,
      name: user.name,
      _creationTime: user._creationTime,
    };
  },
});

================
File: convex/webhookPlayground.ts
================
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";

// Store a webhook payload
export const storeWebhookPayload = mutation({
  args: {
    payload: v.any(),
    headers: v.any(),
    method: v.string(),
    url: v.string(),
    status: v.string(),
    response: v.optional(v.any()),
  },
  handler: async (ctx, args) => {
    await ctx.db.insert("webhookPlayground", {
      payload: args.payload,
      headers: args.headers,
      method: args.method,
      url: args.url,
      receivedAt: Date.now(),
      status: args.status,
      response: args.response,
    });

    // Keep only last 100 webhook payloads
    const allPayloads = await ctx.db
      .query("webhookPlayground")
      .withIndex("by_time")
      .order("desc")
      .collect();

    if (allPayloads.length > 100) {
      const toDelete = allPayloads.slice(100);
      for (const payload of toDelete) {
        await ctx.db.delete(payload._id);
      }
    }
  },
});

// Get webhook payloads
export const getWebhookPayloads = query({
  args: {
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const payloads = await ctx.db
      .query("webhookPlayground")
      .withIndex("by_time")
      .order("desc")
      .take(args.limit || 50);

    return payloads;
  },
});

// Clear all webhook payloads
export const clearWebhookPayloads = mutation({
  handler: async (ctx) => {
    const allPayloads = await ctx.db
      .query("webhookPlayground")
      .collect();

    for (const payload of allPayloads) {
      await ctx.db.delete(payload._id);
    }

    return { deleted: allPayloads.length };
  },
});

================
File: convex/websites.ts
================
import { v } from "convex/values";
import { mutation, query, internalMutation, internalQuery } from "./_generated/server";
import { Id } from "./_generated/dataModel";
import { requireCurrentUser, getCurrentUser } from "./helpers";
import { internal } from "./_generated/api";

// Create a new website to monitor
export const createWebsite = mutation({
  args: {
    url: v.string(),
    name: v.string(),
    checkInterval: v.number(), // in minutes
    notificationPreference: v.optional(v.union(
      v.literal("none"),
      v.literal("email"),
      v.literal("webhook"),
      v.literal("both")
    )),
    webhookUrl: v.optional(v.string()),
    monitorType: v.optional(v.union(
      v.literal("single_page"),
      v.literal("full_site")
    )),
    crawlLimit: v.optional(v.number()),
    crawlDepth: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const user = await requireCurrentUser(ctx);

    const websiteId = await ctx.db.insert("websites", {
      url: args.url,
      name: args.name,
      userId: user._id,
      isActive: true,
      checkInterval: args.checkInterval,
      notificationPreference: args.notificationPreference || "none",
      webhookUrl: args.webhookUrl,
      monitorType: args.monitorType || "single_page",
      crawlLimit: args.crawlLimit,
      crawlDepth: args.crawlDepth,
      createdAt: Date.now(),
      updatedAt: Date.now(),
    });

    // If it's a full site monitor, trigger initial crawl
    if (args.monitorType === "full_site") {
      await ctx.scheduler.runAfter(0, internal.crawl.performInitialCrawl, {
        websiteId,
        userId: user._id,
      });
    }

    return websiteId;
  },
});

// Get all websites for the current user
export const getUserWebsites = query({
  handler: async (ctx) => {
    const user = await getCurrentUser(ctx);
    if (!user) {
      return [];
    }

    const websites = await ctx.db
      .query("websites")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .collect();

    return websites;
  },
});

// Get a specific website (internal)
export const getWebsite = internalQuery({
  args: {
    websiteId: v.id("websites"),
    userId: v.id("users"),
  },
  handler: async (ctx, args) => {
    const website = await ctx.db.get(args.websiteId);
    if (!website || website.userId !== args.userId) {
      return null;
    }
    return website;
  },
});

// Toggle website monitoring
export const toggleWebsiteActive = mutation({
  args: {
    websiteId: v.id("websites"),
  },
  handler: async (ctx, args) => {
    const user = await requireCurrentUser(ctx);

    const website = await ctx.db.get(args.websiteId);
    if (!website || website.userId !== user._id) {
      throw new Error("Website not found");
    }

    await ctx.db.patch(args.websiteId, {
      isActive: !website.isActive,
      updatedAt: Date.now(),
    });

    return !website.isActive;
  },
});

// Update website settings
export const updateWebsite = mutation({
  args: {
    websiteId: v.id("websites"),
    notificationPreference: v.optional(v.union(
      v.literal("none"),
      v.literal("email"),
      v.literal("webhook"),
      v.literal("both")
    )),
    webhookUrl: v.optional(v.string()),
    checkInterval: v.optional(v.number()),
    monitorType: v.optional(v.union(
      v.literal("single_page"),
      v.literal("full_site")
    )),
    crawlLimit: v.optional(v.number()),
    crawlDepth: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const user = await requireCurrentUser(ctx);

    const website = await ctx.db.get(args.websiteId);
    if (!website || website.userId !== user._id) {
      throw new Error("Website not found");
    }

    const updates: any = {
      updatedAt: Date.now(),
    };

    if (args.notificationPreference !== undefined) {
      updates.notificationPreference = args.notificationPreference;
    }

    if (args.webhookUrl !== undefined) {
      updates.webhookUrl = args.webhookUrl;
    }

    if (args.checkInterval !== undefined) {
      updates.checkInterval = args.checkInterval;
    }

    if (args.monitorType !== undefined) {
      updates.monitorType = args.monitorType;
    }

    if (args.crawlLimit !== undefined) {
      updates.crawlLimit = args.crawlLimit;
    }

    if (args.crawlDepth !== undefined) {
      updates.crawlDepth = args.crawlDepth;
    }

    await ctx.db.patch(args.websiteId, updates);

    // If changing to full site monitoring, trigger initial crawl
    if (args.monitorType === "full_site" && website.monitorType !== "full_site") {
      await ctx.scheduler.runAfter(0, internal.crawl.performInitialCrawl, {
        websiteId: args.websiteId,
        userId: user._id,
      });
    }
  },
});

// Store scrape result (internal)
export const storeScrapeResult = internalMutation({
  args: {
    websiteId: v.id("websites"),
    userId: v.id("users"),
    markdown: v.string(),
    changeStatus: v.union(
      v.literal("new"),
      v.literal("same"),
      v.literal("changed"),
      v.literal("removed")
    ),
    visibility: v.union(v.literal("visible"), v.literal("hidden")),
    previousScrapeAt: v.optional(v.number()),
    scrapedAt: v.number(),
    firecrawlMetadata: v.optional(v.any()),
    ogImage: v.optional(v.string()),
    title: v.optional(v.string()),
    description: v.optional(v.string()),
    diff: v.optional(v.object({
      text: v.string(),
      json: v.any(),
    })),
  },
  handler: async (ctx, args) => {
    // Store the scrape result
    const scrapeResultId = await ctx.db.insert("scrapeResults", {
      websiteId: args.websiteId,
      userId: args.userId,
      markdown: args.markdown,
      changeStatus: args.changeStatus,
      visibility: args.visibility,
      previousScrapeAt: args.previousScrapeAt,
      scrapedAt: args.scrapedAt,
      firecrawlMetadata: args.firecrawlMetadata,
      ogImage: args.ogImage,
      title: args.title,
      description: args.description,
      diff: args.diff,
    });

    // Update website last checked time
    await ctx.db.patch(args.websiteId, {
      lastChecked: args.scrapedAt,
      updatedAt: Date.now(),
    });

    return scrapeResultId;
  },
});

// Create change alert (internal)
export const createChangeAlert = internalMutation({
  args: {
    websiteId: v.id("websites"),
    userId: v.id("users"),
    scrapeResultId: v.id("scrapeResults"),
    changeType: v.string(),
    summary: v.string(),
  },
  handler: async (ctx, args) => {
    await ctx.db.insert("changeAlerts", {
      websiteId: args.websiteId,
      userId: args.userId,
      scrapeResultId: args.scrapeResultId,
      changeType: args.changeType,
      summary: args.summary,
      isRead: false,
      createdAt: Date.now(),
    });
  },
});

// Get recent scrape results for a website
export const getWebsiteScrapeHistory = query({
  args: {
    websiteId: v.id("websites"),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUser(ctx);
    if (!user) {
      return [];
    }

    // Verify website ownership
    const website = await ctx.db.get(args.websiteId);
    if (!website || website.userId !== user._id) {
      return [];
    }

    const results = await ctx.db
      .query("scrapeResults")
      .withIndex("by_website_time", (q) => q.eq("websiteId", args.websiteId))
      .order("desc")
      .take(args.limit || 10);

    return results;
  },
});

// Get unread alerts for the current user
export const getUnreadAlerts = query({
  handler: async (ctx) => {
    const user = await getCurrentUser(ctx);
    if (!user) {
      return [];
    }

    const alerts = await ctx.db
      .query("changeAlerts")
      .withIndex("by_read_status", (q) =>
        q.eq("userId", user._id).eq("isRead", false)
      )
      .order("desc")
      .collect();

    // Include website details
    const alertsWithWebsites = await Promise.all(
      alerts.map(async (alert) => {
        const website = await ctx.db.get(alert.websiteId);
        return {
          ...alert,
          websiteName: website?.name,
          websiteUrl: website?.url,
        };
      })
    );

    return alertsWithWebsites;
  },
});

// Mark alert as read
export const markAlertAsRead = mutation({
  args: {
    alertId: v.id("changeAlerts"),
  },
  handler: async (ctx, args) => {
    const user = await requireCurrentUser(ctx);

    const alert = await ctx.db.get(args.alertId);
    if (!alert || alert.userId !== user._id) {
      throw new Error("Alert not found");
    }

    await ctx.db.patch(args.alertId, {
      isRead: true,
    });
  },
});

// Get all scrape history for check log
export const getAllScrapeHistory = query({
  handler: async (ctx) => {
    const user = await getCurrentUser(ctx);
    if (!user) {
      return [];
    }

    // Get all websites for the user
    const websites = await ctx.db
      .query("websites")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .collect();

    const websiteMap = new Map(websites.map(w => [w._id, w]));

    // Get all scrape results for user's websites
    const allScrapes = await ctx.db
      .query("scrapeResults")
      .withIndex("by_user_time", (q) => q.eq("userId", user._id))
      .order("desc")
      .take(100); // Limit to last 100 scrapes

    // Count scrapes per website
    const scrapeCounts = new Map<string, number>();
    for (const scrape of allScrapes) {
      scrapeCounts.set(scrape.websiteId, (scrapeCounts.get(scrape.websiteId) || 0) + 1);
    }

    // Group scrapes by website and find position
    const scrapesByWebsite = new Map<string, typeof allScrapes>();
    for (const scrape of allScrapes) {
      if (!scrapesByWebsite.has(scrape.websiteId)) {
        scrapesByWebsite.set(scrape.websiteId, []);
      }
      scrapesByWebsite.get(scrape.websiteId)!.push(scrape);
    }

    // Enrich with website info and check if it's truly the first scrape
    return allScrapes.map((scrape) => {
      const websiteScrapes = scrapesByWebsite.get(scrape.websiteId) || [];
      const scrapeIndex = websiteScrapes.findIndex(s => s._id === scrape._id);
      const isFirstScrape = scrapeIndex === websiteScrapes.length - 1; // Last in array is oldest
      
      return {
        ...scrape,
        websiteName: websiteMap.get(scrape.websiteId)?.name || "Unknown",
        websiteUrl: websiteMap.get(scrape.websiteId)?.url || "",
        isFirstScrape: isFirstScrape,
        scrapeNumber: websiteScrapes.length - scrapeIndex,
        totalScrapes: websiteScrapes.length,
      };
    });
  },
});

// Get latest scrape result for each website
export const getLatestScrapeForWebsites = query({
  handler: async (ctx) => {
    const user = await getCurrentUser(ctx);
    if (!user) {
      return {};
    }

    const websites = await ctx.db
      .query("websites")
      .withIndex("by_user", (q) => q.eq("userId", user._id))
      .collect();

    const latestScrapes: Record<string, any> = {};
    
    for (const website of websites) {
      const latestScrape = await ctx.db
        .query("scrapeResults")
        .withIndex("by_website_time", (q) => q.eq("websiteId", website._id))
        .order("desc")
        .first();
      
      if (latestScrape) {
        latestScrapes[website._id] = latestScrape;
      }
    }

    return latestScrapes;
  },
});

// Delete a website and all related data
export const deleteWebsite = mutation({
  args: {
    websiteId: v.id("websites"),
  },
  handler: async (ctx, args) => {
    const user = await requireCurrentUser(ctx);

    const website = await ctx.db.get(args.websiteId);
    if (!website || website.userId !== user._id) {
      throw new Error("Website not found");
    }

    // Schedule async deletion of all related data to avoid memory limits
    await ctx.scheduler.runAfter(0, internal.websites.deleteWebsiteData, {
      websiteId: args.websiteId,
      userId: user._id,
      dataType: "scrapeResults"
    });
    
    await ctx.scheduler.runAfter(0, internal.websites.deleteWebsiteData, {
      websiteId: args.websiteId,
      userId: user._id,
      dataType: "changeAlerts"
    });
    
    if (website.monitorType === "full_site") {
      await ctx.scheduler.runAfter(0, internal.websites.deleteWebsiteData, {
        websiteId: args.websiteId,
        userId: user._id,
        dataType: "crawledPages"
      });
      
      await ctx.scheduler.runAfter(0, internal.websites.deleteWebsiteData, {
        websiteId: args.websiteId,
        userId: user._id,
        dataType: "crawlSessions"
      });
    }

    // Delete the website immediately
    await ctx.db.delete(args.websiteId);
  },
});

// Internal function to delete website data asynchronously
export const deleteWebsiteData = internalMutation({
  args: {
    websiteId: v.id("websites"),
    userId: v.id("users"),
    dataType: v.union(
      v.literal("scrapeResults"),
      v.literal("changeAlerts"),
      v.literal("crawledPages"),
      v.literal("crawlSessions")
    ),
  },
  handler: async (ctx, args) => {
    const BATCH_SIZE = 20;
    let hasMore = true;
    
    while (hasMore) {
      let items: any[] = [];
      
      switch (args.dataType) {
        case "scrapeResults":
          items = await ctx.db
            .query("scrapeResults")
            .withIndex("by_website", (q) => q.eq("websiteId", args.websiteId))
            .take(BATCH_SIZE);
          break;
        case "changeAlerts":
          items = await ctx.db
            .query("changeAlerts")
            .withIndex("by_website", (q) => q.eq("websiteId", args.websiteId))
            .take(BATCH_SIZE);
          break;
        case "crawledPages":
          items = await ctx.db
            .query("crawledPages")
            .withIndex("by_website", (q) => q.eq("websiteId", args.websiteId))
            .take(BATCH_SIZE);
          break;
        case "crawlSessions":
          items = await ctx.db
            .query("crawlSessions")
            .withIndex("by_website", (q) => q.eq("websiteId", args.websiteId))
            .take(BATCH_SIZE);
          break;
      }
      
      if (items.length === 0) {
        hasMore = false;
      } else {
        await Promise.all(items.map(item => ctx.db.delete(item._id)));
      }
    }
  },
});

// Create website from API
export const createWebsiteFromApi = internalMutation({
  args: {
    userId: v.id("users"),
    url: v.string(),
    name: v.string(),
    checkInterval: v.number(),
    notificationPreference: v.optional(v.union(
      v.literal("none"),
      v.literal("email"),
      v.literal("webhook"),
      v.literal("both")
    )),
    webhookUrl: v.optional(v.string()),
    monitorType: v.optional(v.union(
      v.literal("single_page"),
      v.literal("full_site")
    )),
    crawlLimit: v.optional(v.number()),
    crawlDepth: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    const websiteId = await ctx.db.insert("websites", {
      url: args.url,
      name: args.name,
      userId: args.userId,
      isActive: true,
      checkInterval: args.checkInterval,
      notificationPreference: args.notificationPreference || "none",
      webhookUrl: args.webhookUrl,
      monitorType: args.monitorType || "single_page",
      crawlLimit: args.crawlLimit,
      crawlDepth: args.crawlDepth,
      createdAt: Date.now(),
      updatedAt: Date.now(),
    });

    // If it's a full site monitor, trigger initial crawl
    if (args.monitorType === "full_site") {
      await ctx.scheduler.runAfter(0, internal.crawl.performInitialCrawl, {
        websiteId,
        userId: args.userId,
      });
    }

    return websiteId;
  },
});

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/firecrawl.svg
================
<svg width="2907" height="600" viewBox="0 0 2907 600" fill="none" xmlns="http://www.w3.org/2000/svg">
<text x="0" y="599.93" fontSize="600" dominant-baseline="text-after-edge">🔥</text>
<path d="M768.456 483V119.364H993.953V166.594H823.321V277.389H977.796V324.442H823.321V483H768.456ZM1052.16 483V210.273H1105.25V483H1052.16ZM1078.97 168.192C1069.74 168.192 1061.81 165.114 1055.18 158.959C1048.67 152.685 1045.42 145.228 1045.42 136.587C1045.42 127.827 1048.67 120.37 1055.18 114.214C1061.81 107.941 1069.74 104.804 1078.97 104.804C1088.21 104.804 1096.08 107.941 1102.59 114.214C1109.22 120.37 1112.53 127.827 1112.53 136.587C1112.53 145.228 1109.22 152.685 1102.59 158.959C1096.08 165.114 1088.21 168.192 1078.97 168.192ZM1171.68 483V210.273H1222.99V253.597H1225.83C1230.8 238.919 1239.56 227.377 1252.11 218.973C1264.77 210.45 1279.1 206.189 1295.08 206.189C1298.39 206.189 1302.3 206.307 1306.8 206.544C1311.41 206.781 1315.02 207.077 1317.63 207.432V258.213C1315.5 257.621 1311.71 256.97 1306.26 256.26C1300.82 255.431 1295.37 255.017 1289.93 255.017C1277.38 255.017 1266.19 257.68 1256.37 263.007C1246.66 268.215 1238.97 275.495 1233.29 284.847C1227.61 294.08 1224.76 304.615 1224.76 316.452V483H1171.68ZM1466.35 488.504C1439.48 488.504 1416.33 482.763 1396.92 471.281C1377.63 459.681 1362.71 443.405 1352.18 422.453C1341.76 401.383 1336.55 376.703 1336.55 348.412C1336.55 320.476 1341.76 295.855 1352.18 274.548C1362.71 253.241 1377.39 236.61 1396.21 224.655C1415.15 212.699 1437.29 206.722 1462.62 206.722C1478.01 206.722 1492.92 209.267 1507.36 214.357C1521.8 219.446 1534.77 227.437 1546.25 238.327C1557.73 249.217 1566.78 263.362 1573.41 280.763C1580.04 298.045 1583.36 319.056 1583.36 343.795V362.616H1366.56V322.844H1531.33C1531.33 308.876 1528.49 296.506 1522.81 285.734C1517.13 274.844 1509.14 266.262 1498.84 259.989C1488.66 253.715 1476.7 250.578 1462.97 250.578C1448.06 250.578 1435.04 254.248 1423.91 261.587C1412.9 268.807 1404.38 278.277 1398.34 289.996C1392.42 301.596 1389.46 314.203 1389.46 327.815V358.888C1389.46 377.117 1392.66 392.624 1399.05 405.408C1405.56 418.192 1414.62 427.957 1426.22 434.705C1437.82 441.333 1451.37 444.648 1466.88 444.648C1476.94 444.648 1486.11 443.227 1494.4 440.386C1502.69 437.427 1509.85 433.047 1515.89 427.247C1521.92 421.447 1526.54 414.286 1529.73 405.763L1579.98 414.818C1575.96 429.615 1568.74 442.576 1558.32 453.703C1548.02 464.712 1535.06 473.294 1519.44 479.449C1503.93 485.486 1486.23 488.504 1466.35 488.504ZM1752.14 488.504C1725.74 488.504 1703.02 482.527 1683.96 470.571C1665.02 458.497 1650.46 441.866 1640.28 420.678C1630.1 399.489 1625.01 375.223 1625.01 347.879C1625.01 320.18 1630.22 295.737 1640.63 274.548C1651.05 253.241 1665.73 236.61 1684.67 224.655C1703.61 212.699 1725.92 206.722 1751.61 206.722C1772.32 206.722 1790.79 210.569 1807.01 218.263C1823.22 225.839 1836.3 236.492 1846.25 250.223C1856.31 263.954 1862.28 279.993 1864.18 298.341H1812.51C1809.67 285.557 1803.16 274.548 1792.98 265.315C1782.92 256.082 1769.42 251.466 1752.5 251.466C1737.7 251.466 1724.74 255.372 1713.61 263.185C1702.6 270.879 1694.02 281.887 1687.86 296.21C1681.71 310.415 1678.63 327.223 1678.63 346.636C1678.63 366.523 1681.65 383.687 1687.69 398.128C1693.72 412.569 1702.25 423.755 1713.26 431.686C1724.38 439.617 1737.46 443.582 1752.5 443.582C1762.56 443.582 1771.67 441.748 1779.84 438.078C1788.13 434.29 1795.05 428.904 1800.61 421.92C1806.3 414.937 1810.26 406.532 1812.51 396.707H1864.18C1862.28 414.345 1856.54 430.088 1846.96 443.938C1837.37 457.787 1824.52 468.677 1808.43 476.608C1792.45 484.539 1773.68 488.504 1752.14 488.504ZM1915.95 483V210.273H1967.27V253.597H1970.11C1975.08 238.919 1983.84 227.377 1996.39 218.973C2009.05 210.45 2023.37 206.189 2039.35 206.189C2042.67 206.189 2046.58 206.307 2051.07 206.544C2055.69 206.781 2059.3 207.077 2061.9 207.432V258.213C2059.77 257.621 2055.99 256.97 2050.54 256.26C2045.1 255.431 2039.65 255.017 2034.21 255.017C2021.66 255.017 2010.47 257.68 2000.65 263.007C1990.94 268.215 1983.25 275.495 1977.56 284.847C1971.88 294.08 1969.04 304.615 1969.04 316.452V483H1915.95ZM2179.77 489.037C2162.49 489.037 2146.87 485.841 2132.9 479.449C2118.93 472.938 2107.86 463.528 2099.7 451.217C2091.65 438.907 2087.62 423.814 2087.62 405.94C2087.62 390.552 2090.58 377.886 2096.5 367.943C2102.42 358 2110.41 350.128 2120.47 344.328C2130.53 338.528 2141.78 334.148 2154.21 331.189C2166.63 328.23 2179.3 325.981 2192.2 324.442C2208.54 322.548 2221.8 321.009 2231.98 319.825C2242.16 318.523 2249.55 316.452 2254.17 313.611C2258.79 310.77 2261.09 306.153 2261.09 299.761V298.518C2261.09 283.012 2256.71 270.997 2247.96 262.474C2239.31 253.952 2226.41 249.69 2209.25 249.69C2191.37 249.69 2177.29 253.656 2166.99 261.587C2156.81 269.399 2149.77 278.099 2145.86 287.688L2095.97 276.324C2101.89 259.752 2110.53 246.376 2121.89 236.196C2133.37 225.898 2146.57 218.44 2161.49 213.824C2176.4 209.089 2192.08 206.722 2208.54 206.722C2219.43 206.722 2230.97 208.024 2243.16 210.628C2255.47 213.114 2266.95 217.73 2277.61 224.477C2288.38 231.224 2297.2 240.872 2304.06 253.419C2310.93 265.848 2314.36 282.006 2314.36 301.892V483H2262.52V445.713H2260.38C2256.95 452.579 2251.8 459.326 2244.94 465.955C2238.07 472.583 2229.25 478.088 2218.48 482.467C2207.71 486.847 2194.81 489.037 2179.77 489.037ZM2191.31 446.423C2205.99 446.423 2218.54 443.523 2228.96 437.723C2239.49 431.923 2247.48 424.347 2252.93 414.996C2258.49 405.526 2261.27 395.405 2261.27 384.634V349.477C2259.38 351.371 2255.71 353.147 2250.26 354.804C2244.94 356.343 2238.84 357.704 2231.98 358.888C2225.11 359.953 2218.42 360.959 2211.91 361.906C2205.4 362.735 2199.96 363.445 2195.58 364.037C2185.28 365.339 2175.87 367.529 2167.34 370.607C2158.94 373.684 2152.19 378.123 2147.1 383.923C2142.13 389.605 2139.65 397.181 2139.65 406.651C2139.65 419.79 2144.5 429.733 2154.21 436.48C2163.91 443.109 2176.28 446.423 2191.31 446.423ZM2439.2 483L2358.94 210.273H2413.81L2467.25 410.557H2469.92L2523.54 210.273H2578.4L2631.67 409.669H2634.34L2687.42 210.273H2742.29L2662.21 483H2608.06L2552.66 286.089H2548.58L2493.18 483H2439.2ZM2840.76 119.364V483H2787.67V119.364H2840.76Z" fill="#36322F"/>
</svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/api/test-webhook/route.ts
================
import { NextRequest, NextResponse } from 'next/server'
import { ConvexHttpClient } from "convex/browser"
import { api } from "../../../../convex/_generated/api"

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!)

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const headers = Object.fromEntries(request.headers.entries())
    
    // Log the webhook payload
    console.log('🔔 Test Webhook Received:', {
      timestamp: new Date().toISOString(),
      headers: headers,
      body: body
    })

    // Store in database
    await convex.mutation(api.webhookPlayground.storeWebhookPayload, {
      payload: body,
      headers: headers,
      method: 'POST',
      url: request.url,
      status: 'success',
      response: {
        success: true,
        message: 'Webhook received successfully',
        receivedAt: new Date().toISOString(),
      }
    })

    // Return success response
    return NextResponse.json({
      success: true,
      message: 'Webhook received successfully',
      receivedAt: new Date().toISOString(),
      payload: body
    }, { status: 200 })
  } catch (error) {
    console.error('❌ Test Webhook Error:', error)
    
    // Try to store the error in database
    try {
      await convex.mutation(api.webhookPlayground.storeWebhookPayload, {
        payload: { error: error instanceof Error ? error.message : 'Unknown error' },
        headers: Object.fromEntries(request.headers.entries()),
        method: 'POST',
        url: request.url,
        status: 'error',
        response: {
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error'
        }
      })
    } catch (dbError) {
      console.error('Failed to store error in database:', dbError)
    }

    return NextResponse.json({
      success: false,
      error: 'Failed to process webhook',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// Also handle GET requests for easy testing
export async function GET() {
  return NextResponse.json({
    message: 'Test webhook endpoint is working!',
    usage: 'Send a POST request to this endpoint with your webhook payload',
    examplePayload: {
      event: 'website_changed',
      website: {
        name: 'Example Site',
        url: 'https://example.com'
      },
      change: {
        detectedAt: new Date().toISOString(),
        changeType: 'content_modified'
      }
    }
  }, { status: 200 })
}

================
File: src/app/api/websites/route.ts
================
import { NextRequest, NextResponse } from 'next/server'

const CONVEX_URL = process.env.NEXT_PUBLIC_CONVEX_URL?.replace('.cloud', '.site') || ''

export async function POST(request: NextRequest) {
  try {
    // Forward the request to Convex HTTP endpoint
    const response = await fetch(`${CONVEX_URL}/api/create-websites`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': request.headers.get('authorization') || '',
      },
      body: JSON.stringify(await request.json()),
    })

    const data = await response.json()
    
    return NextResponse.json(data, { status: response.status })
  } catch (error) {
    console.error('API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// Also handle GET requests to show API info
export async function GET() {
  return NextResponse.json({
    message: 'Firecrawl Observer API',
    endpoints: {
      'POST /api/websites': 'Add a new website to monitor',
    },
    docs: '/api-docs'
  })
}

================
File: src/app/api-docs/page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { Layout, MainContent, Footer } from '@/components/layout/layout'
import { Header } from '@/components/layout/header'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { ArrowLeft, Copy, Check, Code, Globe, Webhook, Clock, Network, BarChart3, Key, Plus, Trash2 } from 'lucide-react'
import Link from 'next/link'
import { useQuery, useMutation, useConvexAuth } from "convex/react"
import { api } from "../../../convex/_generated/api"
import { Id } from "../../../convex/_generated/dataModel"

export default function ApiDocsPage() {
  const { isAuthenticated } = useConvexAuth()
  const [copiedSection, setCopiedSection] = useState<string | null>(null)
  
  // API Key state
  const [showNewApiKey, setShowNewApiKey] = useState(false)
  const [newApiKeyName, setNewApiKeyName] = useState('')
  const [createdApiKey, setCreatedApiKey] = useState<string | null>(null)
  const [copiedKeyId, setCopiedKeyId] = useState<string | null>(null)
  
  // API Key queries and mutations
  const apiKeys = useQuery(api.apiKeys.getUserApiKeys) || []
  const createApiKey = useMutation(api.apiKeys.createApiKey)
  const deleteApiKey = useMutation(api.apiKeys.deleteApiKey)

  const copyToClipboard = (text: string, section: string) => {
    navigator.clipboard.writeText(text)
    setCopiedSection(section)
    setTimeout(() => setCopiedSection(null), 2000)
  }
  
  const handleCreateApiKey = async () => {
    if (!newApiKeyName.trim()) return
    
    try {
      const result = await createApiKey({ name: newApiKeyName })
      setCreatedApiKey(result.key)
      setNewApiKeyName('')
      setShowNewApiKey(false)
    } catch (error) {
      console.error('Failed to create API key:', error)
    }
  }
  
  const handleCopyApiKey = (key: string, keyId: string) => {
    navigator.clipboard.writeText(key)
    setCopiedKeyId(keyId)
    setTimeout(() => setCopiedKeyId(null), 2000)
  }
  
  const handleDeleteApiKey = async (keyId: string) => {
    if (!confirm('Are you sure you want to delete this API key? This action cannot be undone.')) return
    
    try {
      await deleteApiKey({ keyId: keyId as Id<"apiKeys"> })
    } catch (error) {
      console.error('Failed to delete API key:', error)
    }
  }

  const [baseUrl, setBaseUrl] = useState('https://your-domain.com')
  const [defaultWebhook, setDefaultWebhook] = useState('https://your-webhook.com/endpoint')
  
  // Set baseUrl and default webhook after component mounts to avoid hydration issues
  useEffect(() => {
    setBaseUrl(window.location.origin)
    setDefaultWebhook(`${window.location.origin}/api/test-webhook`)
  }, [])

  // Get the first API key if available, or show placeholder
  const apiKeyToShow = createdApiKey || 'YOUR_API_KEY'

  const curlExample = `curl -X POST ${baseUrl}/api/websites \\
  -H "Authorization: Bearer ${apiKeyToShow}" \\
  -H "Content-Type: application/json" \\
  -d '{
    "url": "https://example.com",
    "type": "scrape",
    "checkInterval": 60,
    "webhook": "${defaultWebhook}",
    "name": "Example Website"
  }'`

  const crawlExample = `curl -X POST ${baseUrl}/api/websites \\
  -H "Authorization: Bearer ${apiKeyToShow}" \\
  -H "Content-Type: application/json" \\
  -d '{
    "url": "https://blog.example.com",
    "type": "crawl",
    "checkInterval": 360,
    "crawlLimit": 10,
    "crawlDepth": 2,
    "webhook": "${defaultWebhook}"
  }'`

  const batchExample = `curl -X POST ${baseUrl}/api/websites \\
  -H "Authorization: Bearer ${apiKeyToShow}" \\
  -H "Content-Type: application/json" \\
  -d '[
    {
      "url": "https://figma.com",
      "type": "scrape",
      "checkInterval": 30,
      "webhook": "${defaultWebhook}",
      "name": "Figma"
    },
    {
      "url": "https://firecrawl.dev",
      "type": "crawl",
      "checkInterval": 60,
      "crawlLimit": 10,
      "crawlDepth": 3,
      "webhook": "${defaultWebhook}",
      "name": "Firecrawl"
    },
    {
      "url": "https://apple.com",
      "type": "scrape",
      "checkInterval": 180,
      "webhook": "${defaultWebhook}",
      "name": "Apple"
    }
  ]'`

  const responseExample = `{
  "success": true,
  "websiteId": "k57m3...",
  "message": "Website added successfully",
  "data": {
    "url": "https://example.com",
    "name": "Example Website",
    "type": "single_page",
    "checkInterval": 60,
    "webhook": "${defaultWebhook}",
    "crawlLimit": null,
    "crawlDepth": null
  }
}`

  const batchResponseExample = `{
  "success": true,
  "message": "Batch request processed. 3 websites added successfully.",
  "results": [
    {
      "index": 0,
      "websiteId": "j47n2...",
      "url": "https://figma.com",
      "name": "Figma",
      "type": "single_page",
      "checkInterval": 30,
      "webhook": "${defaultWebhook}"
    },
    {
      "index": 1,
      "websiteId": "k92m4...",
      "url": "https://firecrawl.dev",
      "name": "Firecrawl",
      "type": "full_site",
      "checkInterval": 60,
      "webhook": "${defaultWebhook}",
      "crawlLimit": 10,
      "crawlDepth": 3
    },
    {
      "index": 2,
      "websiteId": "m83p5...",
      "url": "https://apple.com",
      "name": "Apple",
      "type": "single_page",
      "checkInterval": 180,
      "webhook": "${defaultWebhook}"
    }
  ],
  "total": 3,
  "successful": 3,
  "failed": 0
}`

  return (
    <Layout>
      <Header />
      
      <MainContent maxWidth="7xl" className="py-12">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center gap-4 mb-8">
            <Link href="/" className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
              <ArrowLeft className="h-5 w-5" />
            </Link>
            <h1 className="text-3xl font-bold flex items-center gap-2">
              <Code className="h-8 w-8 text-orange-500" />
              API Documentation
            </h1>
          </div>

          {/* Introduction */}
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4">Getting Started</h2>
            <p className="text-gray-600 mb-4">
              The Firecrawl Observer API allows you to programmatically add websites to your monitoring list. 
              You can configure single page monitoring or full site crawling, set check intervals, and configure webhook notifications.
            </p>
            <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-3">
              <p className="text-sm text-orange-800">
                <strong>Getting Started:</strong> {isAuthenticated 
                  ? "Generate an API key below to authenticate your API requests." 
                  : "Sign in to generate API keys for authenticating your requests."}
                Use API keys in the Authorization header for all API requests.
              </p>
            </div>
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
              <p className="text-sm text-gray-700">
                <strong>Security:</strong> Keep your API keys secure. Do not commit them to version control or expose them in client-side code. 
                API keys have full access to create websites in your account.
              </p>
            </div>
          </div>

          {/* API Keys Management */}
          {isAuthenticated && (
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4">Your API Keys</h2>
            
            {/* Created API key alert */}
            {createdApiKey && (
              <div className="p-4 bg-green-50 border border-green-200 rounded-lg mb-4">
                <h4 className="font-medium text-green-900 mb-2">API Key Created Successfully</h4>
                <p className="text-sm text-green-700 mb-3">
                  Make sure to copy your API key now. You won&apos;t be able to see it again!
                </p>
                <div className="flex gap-2">
                  <code className="flex-1 p-2 bg-white border rounded text-xs font-mono break-all">
                    {createdApiKey}
                  </code>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      navigator.clipboard.writeText(createdApiKey)
                      setCreatedApiKey(null)
                    }}
                  >
                    <Copy className="h-4 w-4 mr-1" />
                    Copy
                  </Button>
                </div>
              </div>
            )}
            
            <div className="flex items-center justify-between mb-4">
              <div>
                <p className="text-sm text-gray-600">
                  API keys allow you to programmatically add websites to your monitoring list.
                </p>
                {!createdApiKey && (
                  <p className="text-xs text-gray-500 mt-1">
                    Create a new API key to see it automatically populated in the examples below.
                  </p>
                )}
              </div>
              <Button
                variant="orange"
                size="sm"
                onClick={() => setShowNewApiKey(true)}
                disabled={apiKeys && apiKeys.length >= 5}
              >
                <Plus className="h-4 w-4 mr-1" />
                Create New Key
              </Button>
            </div>
            
            {showNewApiKey && (
              <div className="mb-4 p-4 border rounded-lg bg-gray-50">
                <div className="flex gap-2">
                  <Input
                    placeholder="API key name (e.g., Production)"
                    value={newApiKeyName}
                    onChange={(e) => setNewApiKeyName(e.target.value)}
                    onKeyDown={(e) => e.key === 'Enter' && handleCreateApiKey()}
                    className="flex-1"
                  />
                  <Button
                    variant="orange"
                    size="sm"
                    onClick={handleCreateApiKey}
                    disabled={!newApiKeyName.trim()}
                  >
                    Create
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      setShowNewApiKey(false)
                      setNewApiKeyName('')
                    }}
                  >
                    Cancel
                  </Button>
                </div>
              </div>
            )}
            
            {apiKeys && apiKeys.length > 0 ? (
              <div className="space-y-2">
                {apiKeys.map((key) => (
                  <div
                    key={key._id}
                    className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50"
                  >
                    <div className="flex-1">
                      <div className="font-medium text-sm">{key.name}</div>
                      <div className="flex items-center gap-2 mt-1">
                        <code className="text-xs text-gray-500 font-mono">
                          {key.keyPreview}
                        </code>
                        <Button
                          variant="ghost"
                          size="xs"
                          onClick={() => handleCopyApiKey(key.keyPreview, key._id)}
                          className="h-6 px-2"
                        >
                          {copiedKeyId === key._id ? (
                            <span className="text-green-600 text-xs">Copied!</span>
                          ) : (
                            <Copy className="h-3 w-3" />
                          )}
                        </Button>
                      </div>
                      <div className="text-xs text-gray-400 mt-1">
                        Created {new Date(key.createdAt).toLocaleDateString()}
                        {key.lastUsed && (
                          <> • Last used {new Date(key.lastUsed).toLocaleDateString()}</>
                        )}
                      </div>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleDeleteApiKey(key._id)}
                      className="text-red-600 hover:text-red-700 hover:bg-red-50"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <Key className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                <p className="text-sm">No API keys yet</p>
                <p className="text-xs mt-1">Create your first API key to get started</p>
              </div>
            )}
            
            {apiKeys && apiKeys.length >= 5 && (
              <p className="text-xs text-gray-500 mt-2">
                Maximum of 5 API keys allowed per account
              </p>
            )}
          </div>
          )}

          {/* Endpoint */}
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4">Add Website Endpoint</h2>
            
            <div className="bg-gray-900 text-gray-100 rounded-lg p-4 mb-4">
              <div className="flex items-center justify-between mb-2">
                <code className="text-sm">POST {baseUrl}/api/websites</code>
                <Button
                  variant="code"
                  size="sm"
                  onClick={() => copyToClipboard(`POST ${baseUrl}/api/websites`, 'endpoint')}
                  className="text-xs"
                >
                  {copiedSection === 'endpoint' ? (
                    <>
                      <Check className="h-3 w-3 mr-1" />
                      Copied!
                    </>
                  ) : (
                    <>
                      <Copy className="h-3 w-3 mr-1" />
                      Copy
                    </>
                  )}
                </Button>
              </div>
            </div>

            <h3 className="font-medium mb-2">Headers</h3>
            <table className="w-full mb-4">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-2">Header</th>
                  <th className="text-left py-2">Value</th>
                  <th className="text-left py-2">Required</th>
                </tr>
              </thead>
              <tbody className="text-sm">
                <tr className="border-b">
                  <td className="py-2 font-mono">Authorization</td>
                  <td className="py-2 font-mono">Bearer YOUR_API_KEY</td>
                  <td className="py-2">Yes</td>
                </tr>
                <tr className="border-b">
                  <td className="py-2 font-mono">Content-Type</td>
                  <td className="py-2 font-mono">application/json</td>
                  <td className="py-2">Yes</td>
                </tr>
              </tbody>
            </table>

            <h3 className="font-medium mb-2">Request Body</h3>
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-2">Field</th>
                  <th className="text-left py-2">Type</th>
                  <th className="text-left py-2">Required</th>
                  <th className="text-left py-2">Description</th>
                </tr>
              </thead>
              <tbody className="text-sm">
                <tr className="border-b">
                  <td className="py-2 font-mono">url</td>
                  <td className="py-2">string</td>
                  <td className="py-2">Yes</td>
                  <td className="py-2">The URL to monitor</td>
                </tr>
                <tr className="border-b">
                  <td className="py-2 font-mono">type</td>
                  <td className="py-2">string</td>
                  <td className="py-2">No</td>
                  <td className="py-2">&quot;scrape&quot; for single page or &quot;crawl&quot; for full site (default: &quot;scrape&quot;)</td>
                </tr>
                <tr className="border-b">
                  <td className="py-2 font-mono">name</td>
                  <td className="py-2">string</td>
                  <td className="py-2">No</td>
                  <td className="py-2">Display name for the website (auto-generated if not provided)</td>
                </tr>
                <tr className="border-b">
                  <td className="py-2 font-mono">checkInterval</td>
                  <td className="py-2">number</td>
                  <td className="py-2">No</td>
                  <td className="py-2">Check interval in minutes (default: 60)</td>
                </tr>
                <tr className="border-b">
                  <td className="py-2 font-mono">webhook</td>
                  <td className="py-2">string</td>
                  <td className="py-2">No</td>
                  <td className="py-2">Webhook URL for change notifications</td>
                </tr>
                <tr className="border-b">
                  <td className="py-2 font-mono">crawlLimit</td>
                  <td className="py-2">number</td>
                  <td className="py-2">No</td>
                  <td className="py-2">Max pages to crawl (only for type: &quot;crawl&quot;, default: 5)</td>
                </tr>
                <tr className="border-b">
                  <td className="py-2 font-mono">crawlDepth</td>
                  <td className="py-2">number</td>
                  <td className="py-2">No</td>
                  <td className="py-2">Max crawl depth (only for type: &quot;crawl&quot;, default: 3)</td>
                </tr>
              </tbody>
            </table>
          </div>

          {/* Examples */}
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4">Examples</h2>
            
            {/* Single Page Example */}
            <div className="mb-6">
              <h3 className="font-medium mb-2 flex items-center gap-2">
                <Globe className="h-4 w-4" />
                Single Page Monitoring
              </h3>
              <div className="bg-gray-900 text-gray-100 rounded-lg overflow-hidden">
                <div className="flex items-center justify-between p-3 border-b border-gray-800">
                  <span className="text-xs font-medium">cURL</span>
                  <Button
                    variant="code"
                    size="sm"
                    onClick={() => copyToClipboard(curlExample, 'curl-single')}
                    className="text-xs"
                  >
                    {copiedSection === 'curl-single' ? (
                      <>
                        <Check className="h-3 w-3 mr-1" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="h-3 w-3 mr-1" />
                        Copy
                      </>
                    )}
                  </Button>
                </div>
                <pre className="p-4 overflow-x-auto">
                  <code className="text-xs">{curlExample}</code>
                </pre>
              </div>
            </div>

            {/* Crawl Example */}
            <div className="mb-6">
              <h3 className="font-medium mb-2 flex items-center gap-2">
                <Network className="h-4 w-4" />
                Full Site Crawling
              </h3>
              <div className="bg-gray-900 text-gray-100 rounded-lg overflow-hidden">
                <div className="flex items-center justify-between p-3 border-b border-gray-800">
                  <span className="text-xs font-medium">cURL</span>
                  <Button
                    variant="code"
                    size="sm"
                    onClick={() => copyToClipboard(crawlExample, 'curl-crawl')}
                    className="text-xs"
                  >
                    {copiedSection === 'curl-crawl' ? (
                      <>
                        <Check className="h-3 w-3 mr-1" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="h-3 w-3 mr-1" />
                        Copy
                      </>
                    )}
                  </Button>
                </div>
                <pre className="p-4 overflow-x-auto">
                  <code className="text-xs">{crawlExample}</code>
                </pre>
              </div>
            </div>

            {/* Batch Example */}
            <div className="mb-6">
              <h3 className="font-medium mb-2 flex items-center gap-2">
                <BarChart3 className="h-4 w-4" />
                Batch Request (Multiple Websites)
              </h3>
              <p className="text-sm text-gray-600 mb-3">
                Add multiple websites in a single API call by sending an array of website objects:
              </p>
              <div className="bg-gray-900 text-gray-100 rounded-lg overflow-hidden">
                <div className="flex items-center justify-between p-3 border-b border-gray-800">
                  <span className="text-xs font-medium">cURL</span>
                  <Button
                    variant="code"
                    size="sm"
                    onClick={() => copyToClipboard(batchExample, 'curl-batch')}
                    className="text-xs"
                  >
                    {copiedSection === 'curl-batch' ? (
                      <>
                        <Check className="h-3 w-3 mr-1" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="h-3 w-3 mr-1" />
                        Copy
                      </>
                    )}
                  </Button>
                </div>
                <pre className="p-4 overflow-x-auto">
                  <code className="text-xs">{batchExample}</code>
                </pre>
              </div>
            </div>

            {/* Response Examples */}
            <div className="mb-6">
              <h3 className="font-medium mb-2">Single Request Response</h3>
              <div className="bg-gray-900 text-gray-100 rounded-lg overflow-hidden">
                <div className="flex items-center justify-between p-3 border-b border-gray-800">
                  <span className="text-xs font-medium">JSON Response</span>
                  <Button
                    variant="code"
                    size="sm"
                    onClick={() => copyToClipboard(responseExample, 'response')}
                    className="text-xs"
                  >
                    {copiedSection === 'response' ? (
                      <>
                        <Check className="h-3 w-3 mr-1" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="h-3 w-3 mr-1" />
                        Copy
                      </>
                    )}
                  </Button>
                </div>
                <pre className="p-4 overflow-x-auto">
                  <code className="text-xs">{responseExample}</code>
                </pre>
              </div>
            </div>

            {/* Batch Response Example */}
            <div>
              <h3 className="font-medium mb-2">Batch Request Response</h3>
              <div className="bg-gray-900 text-gray-100 rounded-lg overflow-hidden">
                <div className="flex items-center justify-between p-3 border-b border-gray-800">
                  <span className="text-xs font-medium">JSON Response</span>
                  <Button
                    variant="code"
                    size="sm"
                    onClick={() => copyToClipboard(batchResponseExample, 'batch-response')}
                    className="text-xs"
                  >
                    {copiedSection === 'batch-response' ? (
                      <>
                        <Check className="h-3 w-3 mr-1" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="h-3 w-3 mr-1" />
                        Copy
                      </>
                    )}
                  </Button>
                </div>
                <pre className="p-4 overflow-x-auto">
                  <code className="text-xs">{batchResponseExample}</code>
                </pre>
              </div>
            </div>
          </div>

          {/* Check Intervals */}
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Clock className="h-5 w-5" />
              Available Check Intervals
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              {[
                { value: 0.25, label: '15 seconds (test)' },
                { value: 5, label: '5 minutes' },
                { value: 15, label: '15 minutes' },
                { value: 30, label: '30 minutes' },
                { value: 60, label: '1 hour' },
                { value: 180, label: '3 hours' },
                { value: 360, label: '6 hours' },
                { value: 720, label: '12 hours' },
                { value: 1440, label: '24 hours' },
                { value: 4320, label: '3 days' },
                { value: 10080, label: '7 days' },
              ].map((interval) => (
                <div key={interval.value} className="p-3 bg-gray-50 rounded-lg">
                  <div className="font-mono text-sm font-medium">{interval.value}</div>
                  <div className="text-xs text-gray-600">{interval.label}</div>
                </div>
              ))}
            </div>
          </div>

          {/* Webhook Format */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Webhook className="h-5 w-5" />
              Webhook Payload Format
            </h2>
            <p className="text-gray-600 mb-4">
              When changes are detected, we&apos;ll send a POST request to your webhook URL with the following payload:
            </p>
            <div className="bg-gray-900 text-gray-100 rounded-lg p-4 overflow-x-auto">
              <pre className="text-xs">
                <code>{`{
  "event": "website_changed",
  "timestamp": "2024-01-20T10:30:00Z",
  "website": {
    "id": "k57m3...",
    "name": "Example Website",
    "url": "https://example.com/page"
  },
  "change": {
    "detectedAt": "2024-01-20T10:30:00Z",
    "changeType": "content_changed",
    "changeStatus": "changed",
    "summary": "Page content has changed",
    "diff": {
      "added": ["New content lines..."],
      "removed": ["Old content lines..."]
    }
  },
  "scrapeResult": {
    "id": "j92n4...",
    "title": "Page Title",
    "description": "Page description",
    "markdown": "# Page Content..."
  }
}`}</code>
              </pre>
            </div>
          </div>
        </div>
      </MainContent>
      
      <Footer />
    </Layout>
  )
}

================
File: src/app/settings/page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { Layout, MainContent, Footer } from '@/components/layout/layout'
import { Header } from '@/components/layout/header'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { useRouter } from 'next/navigation'
import { useConvexAuth, useQuery, useMutation } from "convex/react"
import { api } from "../../../convex/_generated/api"
import { Loader2, User, Bell, Trash2, ArrowLeft, Mail, AlertCircle, Key, Copy, Plus, X } from 'lucide-react'
import { useAuthActions } from "@convex-dev/auth/react"
import Link from 'next/link'

export default function SettingsPage() {
  const router = useRouter()
  const { isLoading: authLoading, isAuthenticated } = useConvexAuth()
  const { signOut } = useAuthActions()
  const currentUser = useQuery(api.users.getCurrentUser)
  
  const [activeSection, setActiveSection] = useState<'profile' | 'notifications' | 'api' | 'danger'>('profile')
  const [isDeleting, setIsDeleting] = useState(false)
  const [deleteConfirmation, setDeleteConfirmation] = useState('')
  
  // API Key state
  const [showNewApiKey, setShowNewApiKey] = useState(false)
  const [newApiKeyName, setNewApiKeyName] = useState('')
  const [createdApiKey, setCreatedApiKey] = useState<string | null>(null)
  const [copiedKeyId, setCopiedKeyId] = useState<string | null>(null)
  
  // API Key queries and mutations
  // Debug authentication state
  console.log('Settings Page Auth State:', { authLoading, isAuthenticated, currentUser })
  
  const apiKeys = useQuery(api.apiKeys.getUserApiKeys)
  const createApiKey = useMutation(api.apiKeys.createApiKey)
  const deleteApiKey = useMutation(api.apiKeys.deleteApiKey)
  
  // Redirect if not authenticated
  useEffect(() => {
    if (!authLoading && !isAuthenticated) {
      console.log('Redirecting: Not authenticated', { authLoading, isAuthenticated })
      router.push('/')
    }
  }, [authLoading, isAuthenticated, router])
  
  // Redirect if user is not found
  useEffect(() => {
    if (!authLoading && currentUser === null) {
      console.log('Redirecting: User not found', { authLoading, currentUser })
      router.push('/')
    }
  }, [authLoading, currentUser, router])
  
  // Show loading while auth or user data is loading
  if (authLoading || currentUser === undefined || (!authLoading && !isAuthenticated) || currentUser === null) {
    return (
      <Layout>
        <Header />
        <MainContent maxWidth="7xl" className="py-12">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center justify-center py-20">
              <div className="text-center">
                <Loader2 className="h-8 w-8 animate-spin text-orange-500 mx-auto mb-4" />
                <p className="text-gray-500">Loading your account details...</p>
              </div>
            </div>
          </div>
        </MainContent>
        <Footer />
      </Layout>
    )
  }
  
  const handleDeleteAccount = async () => {
    if (deleteConfirmation !== 'DELETE') return
    
    setIsDeleting(true)
    try {
      // Sign out and redirect
      await signOut()
      router.push('/')
    } catch (error) {
      console.error('Failed to delete account:', error)
    } finally {
      setIsDeleting(false)
    }
  }
  
  const handleCreateApiKey = async () => {
    if (!newApiKeyName.trim()) return
    
    try {
      const result = await createApiKey({ name: newApiKeyName })
      setCreatedApiKey(result.key)
      setNewApiKeyName('')
      setShowNewApiKey(false)
    } catch (error) {
      console.error('Failed to create API key:', error)
    }
  }
  
  const handleCopyApiKey = (key: string, keyId: string) => {
    navigator.clipboard.writeText(key)
    setCopiedKeyId(keyId)
    setTimeout(() => setCopiedKeyId(null), 2000)
  }
  
  const handleDeleteApiKey = async (keyId: string) => {
    if (!confirm('Are you sure you want to delete this API key? This action cannot be undone.')) return
    
    try {
      await deleteApiKey({ keyId: keyId as any })
    } catch (error) {
      console.error('Failed to delete API key:', error)
    }
  }
  
  return (
    <Layout>
      <Header />
      
      <MainContent maxWidth="7xl" className="py-12">
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center gap-4 mb-8">
            <Link href="/" className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
              <ArrowLeft className="h-5 w-5" />
            </Link>
            <h1 className="text-3xl font-bold">Settings</h1>
          </div>
          
          <div className="flex gap-8">
            {/* Sidebar */}
            <div className="w-64 flex-shrink-0">
              <nav className="space-y-1">
                <button
                  onClick={() => setActiveSection('profile')}
                  className={`w-full flex items-center gap-3 px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                    activeSection === 'profile'
                      ? 'bg-orange-100 text-orange-700'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <User className="h-4 w-4" />
                  Profile
                </button>
                <button
                  onClick={() => setActiveSection('notifications')}
                  className={`w-full flex items-center gap-3 px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                    activeSection === 'notifications'
                      ? 'bg-orange-100 text-orange-700'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <Bell className="h-4 w-4" />
                  Notifications
                </button>
                <button
                  onClick={() => setActiveSection('api')}
                  className={`w-full flex items-center gap-3 px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                    activeSection === 'api'
                      ? 'bg-orange-100 text-orange-700'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <Key className="h-4 w-4" />
                  API Keys
                </button>
                <button
                  onClick={() => setActiveSection('danger')}
                  className={`w-full flex items-center gap-3 px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                    activeSection === 'danger'
                      ? 'bg-orange-100 text-orange-700'
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  <Trash2 className="h-4 w-4" />
                  Danger Zone
                </button>
              </nav>
            </div>
            
            {/* Content */}
            <div className="flex-1">
              {activeSection === 'profile' && (
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h2 className="text-xl font-semibold mb-6">Profile Settings</h2>
                  
                  <div className="space-y-6">
                    <div>
                      <Label htmlFor="email">Email</Label>
                      <Input
                        id="email"
                        type="email"
                        value={currentUser.email || ''}
                        disabled
                        className="mt-1"
                      />
                      <p className="text-sm text-gray-500 mt-1">Your email cannot be changed</p>
                    </div>
                    
                    <div>
                      <Label htmlFor="name">Display Name</Label>
                      <Input
                        id="name"
                        type="text"
                        value={currentUser.name || currentUser.email || ''}
                        disabled
                        className="mt-1"
                      />
                    </div>
                    
                    <div>
                      <h3 className="font-medium mb-2">Account Created</h3>
                      <p className="text-sm text-gray-600">
                        {currentUser._creationTime 
                          ? new Date(currentUser._creationTime).toLocaleDateString('en-US', {
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric'
                            })
                          : 'Unknown'
                        }
                      </p>
                    </div>
                  </div>
                </div>
              )}
              
              {activeSection === 'notifications' && (
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h2 className="text-xl font-semibold mb-6">Notification Settings</h2>
                  
                  <div className="space-y-6">
                    {/* Email Configuration */}
                    <div>
                      <h3 className="text-lg font-medium mb-4 flex items-center gap-2">
                        <Mail className="h-5 w-5" />
                        Email Notifications
                      </h3>
                      
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="notification-email">Notification Email</Label>
                          <div className="flex gap-2 mt-1">
                            <Input
                              id="notification-email"
                              type="email"
                              placeholder="alerts@example.com"
                              className="flex-1"
                            />
                            <Button variant="orange" size="sm">
                              Save Email
                            </Button>
                          </div>
                          <p className="text-sm text-gray-500 mt-1">
                            We&apos;ll send change notifications to this email address
                          </p>
                        </div>
                        
                        {/* Email verification status */}
                        <div className="flex items-center gap-2 p-3 bg-amber-50 border border-amber-200 rounded-lg">
                          <AlertCircle className="h-4 w-4 text-amber-600" />
                          <p className="text-sm text-amber-700">
                            Please verify your email address to receive notifications
                          </p>
                        </div>
                        
                        {/* Email template preview */}
                        <div>
                          <h4 className="font-medium mb-2">Email Preview</h4>
                          <div className="border rounded-lg p-4 bg-gray-50">
                            <div className="space-y-2 text-sm">
                              <p className="font-semibold">Subject: Changes detected on example.com</p>
                              <div className="border-t pt-2">
                                <p className="text-gray-600">Hi there,</p>
                                <p className="text-gray-600 mt-2">
                                  We&apos;ve detected changes on the website you&apos;re monitoring:
                                </p>
                                <div className="mt-2 p-3 bg-white rounded border">
                                  <p className="font-medium">example.com</p>
                                  <p className="text-gray-500 text-xs mt-1">Changed at: {new Date().toLocaleString()}</p>
                                </div>
                                <p className="text-gray-600 mt-2">
                                  <a href="#" className="text-orange-600 underline">View changes →</a>
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* Global email preferences */}
                    <div className="border-t pt-6">
                      <h4 className="font-medium mb-3">Email Preferences</h4>
                      <div className="space-y-3">
                        <label className="flex items-center gap-3">
                          <input type="checkbox" className="rounded border-gray-300 text-orange-600 focus:ring-orange-500" />
                          <span className="text-sm">Send digest emails (daily summary of all changes)</span>
                        </label>
                        <label className="flex items-center gap-3">
                          <input type="checkbox" className="rounded border-gray-300 text-orange-600 focus:ring-orange-500" defaultChecked />
                          <span className="text-sm">Send instant notifications for each change</span>
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              {activeSection === 'api' && (
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h2 className="text-xl font-semibold mb-6">API Keys</h2>
                  
                  <div className="space-y-6">
                    <div>
                      <p className="text-gray-600 mb-4">
                        API keys allow you to programmatically add websites to your monitoring list. 
                        Keep your API keys secure and do not share them publicly.
                      </p>
                      
                      <Link href="/api-docs" className="text-orange-600 hover:text-orange-700 text-sm font-medium">
                        View API Documentation →
                      </Link>
                    </div>
                    
                    {/* Created API key alert */}
                    {createdApiKey && (
                      <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                        <h4 className="font-medium text-green-900 mb-2">API Key Created Successfully</h4>
                        <p className="text-sm text-green-700 mb-3">
                          Make sure to copy your API key now. You won&apos;t be able to see it again!
                        </p>
                        <div className="flex gap-2">
                          <code className="flex-1 p-2 bg-white border rounded text-xs font-mono">
                            {createdApiKey}
                          </code>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              navigator.clipboard.writeText(createdApiKey)
                              setCreatedApiKey(null)
                            }}
                          >
                            <Copy className="h-4 w-4 mr-1" />
                            Copy
                          </Button>
                        </div>
                      </div>
                    )}
                    
                    {/* API Keys list */}
                    <div>
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="font-medium">Your API Keys</h3>
                        <Button
                          variant="orange"
                          size="sm"
                          onClick={() => setShowNewApiKey(true)}
                          disabled={apiKeys && apiKeys.length >= 5}
                        >
                          <Plus className="h-4 w-4 mr-1" />
                          Create New Key
                        </Button>
                      </div>
                      
                      {showNewApiKey && (
                        <div className="mb-4 p-4 border rounded-lg bg-gray-50">
                          <div className="flex gap-2">
                            <Input
                              placeholder="API key name (e.g., Production)"
                              value={newApiKeyName}
                              onChange={(e) => setNewApiKeyName(e.target.value)}
                              onKeyDown={(e) => e.key === 'Enter' && handleCreateApiKey()}
                              className="flex-1"
                            />
                            <Button
                              variant="orange"
                              size="sm"
                              onClick={handleCreateApiKey}
                              disabled={!newApiKeyName.trim()}
                            >
                              Create
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                setShowNewApiKey(false)
                                setNewApiKeyName('')
                              }}
                            >
                              Cancel
                            </Button>
                          </div>
                        </div>
                      )}
                      
                      {apiKeys && apiKeys.length > 0 ? (
                        <div className="space-y-2">
                          {apiKeys.map((key) => (
                            <div
                              key={key._id}
                              className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50"
                            >
                              <div className="flex-1">
                                <div className="font-medium text-sm">{key.name}</div>
                                <div className="flex items-center gap-2 mt-1">
                                  <code className="text-xs text-gray-500 font-mono">
                                    {key.keyPreview}
                                  </code>
                                  <Button
                                    variant="ghost"
                                    size="xs"
                                    onClick={() => handleCopyApiKey(key.keyPreview, key._id)}
                                    className="h-6 px-2"
                                  >
                                    {copiedKeyId === key._id ? (
                                      <span className="text-green-600 text-xs">Copied!</span>
                                    ) : (
                                      <Copy className="h-3 w-3" />
                                    )}
                                  </Button>
                                </div>
                                <div className="text-xs text-gray-400 mt-1">
                                  Created {new Date(key.createdAt).toLocaleDateString()}
                                  {key.lastUsed && (
                                    <> • Last used {new Date(key.lastUsed).toLocaleDateString()}</>
                                  )}
                                </div>
                              </div>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleDeleteApiKey(key._id)}
                                className="text-red-600 hover:text-red-700 hover:bg-red-50"
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-center py-8 text-gray-500">
                          <Key className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                          <p className="text-sm">No API keys yet</p>
                          <p className="text-xs mt-1">Create your first API key to get started</p>
                        </div>
                      )}
                      
                      {apiKeys && apiKeys.length >= 5 && (
                        <p className="text-xs text-gray-500 mt-2">
                          Maximum of 5 API keys allowed per account
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              )}
              
              {activeSection === 'danger' && (
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <h2 className="text-xl font-semibold mb-6 text-red-600">Danger Zone</h2>
                  
                  <div className="space-y-6">
                    <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                      <h3 className="font-medium text-red-900 mb-2">Delete Account</h3>
                      <p className="text-sm text-red-700 mb-4">
                        Once you delete your account, there is no going back. All your monitored websites and data will be permanently deleted.
                      </p>
                      
                      <div className="space-y-3">
                        <div>
                          <Label htmlFor="delete-confirm" className="text-sm text-red-700">
                            Type DELETE to confirm
                          </Label>
                          <Input
                            id="delete-confirm"
                            type="text"
                            value={deleteConfirmation}
                            onChange={(e) => setDeleteConfirmation(e.target.value)}
                            placeholder="Type DELETE"
                            className="mt-1"
                          />
                        </div>
                        
                        <Button
                          variant="destructive"
                          onClick={handleDeleteAccount}
                          disabled={deleteConfirmation !== 'DELETE' || isDeleting}
                          className="w-full"
                        >
                          {isDeleting ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Deleting...
                            </>
                          ) : (
                            'Delete Account Permanently'
                          )}
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </MainContent>
      
      <Footer />
    </Layout>
  )
}

================
File: src/app/style-guide/page.tsx
================
import { Layout, MainContent, Footer } from '@/components/layout/layout'
import { Header } from '@/components/layout/header'
import { Hero } from '@/components/layout/hero'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Select } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Checkbox } from '@/components/ui/checkbox'

export default function StyleGuidePage() {
  return (
    <Layout>
      <Header ctaHref="https://github.com/new?template_name=firecrawl-style-guide&template_owner=your-org" />
      
      <Hero 
        title="Firecrawl Style Guide"
        subtitle="UI components and design patterns"
      />
      
      <MainContent maxWidth="7xl" className="py-12">
        <div className="space-y-16">
          {/* Buttons Section */}
          <section>
            <h2 className="text-2xl font-semibold mb-6">Buttons</h2>
            
            <div className="space-y-8">
              <div>
                <h3 className="text-sm font-medium text-zinc-500 mb-4">All Buttons with Box Shadow Effects</h3>
                <div className="flex flex-wrap gap-4">
                  <Button variant="default">Default</Button>
                  <Button variant="secondary">Secondary</Button>
                  <Button variant="outline">Outline</Button>
                  <Button variant="destructive">Destructive</Button>
                  <Button variant="code">Code</Button>
                  <Button variant="orange">Orange</Button>
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-zinc-500 mb-4">Disabled States</h3>
                <div className="flex flex-wrap gap-4">
                  <Button variant="default" disabled>Default</Button>
                  <Button variant="secondary" disabled>Secondary</Button>
                  <Button variant="outline" disabled>Outline</Button>
                  <Button variant="destructive" disabled>Destructive</Button>
                  <Button variant="code" disabled>Code</Button>
                  <Button variant="orange" disabled>Orange</Button>
                </div>
              </div>
            </div>
          </section>

          {/* Universal Input Section */}
          <section>
            <h2 className="text-2xl font-semibold mb-6">Universal Input with Box Shadow</h2>
            
            <div className="space-y-8">
              <div>
                <h3 className="text-sm font-medium text-zinc-500 mb-4">Input States</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="input-default">Default Input</Label>
                    <Input id="input-default" type="text" placeholder="Enter text..." />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="input-focused">Focused Input (click to see)</Label>
                    <Input id="input-focused" type="text" placeholder="Click me to see focus state" />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="input-filled">Filled Input</Label>
                    <Input id="input-filled" type="text" defaultValue="Example content" />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="input-disabled">Disabled Input</Label>
                    <Input id="input-disabled" type="text" placeholder="Disabled" disabled />
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-zinc-500 mb-4">Input Types</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="input-email">Email</Label>
                    <Input id="input-email" type="email" placeholder="email@example.com" />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="input-password">Password</Label>
                    <Input id="input-password" type="password" placeholder="Enter password" />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="input-number">Number</Label>
                    <Input id="input-number" type="number" placeholder="123" />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="input-search">Search</Label>
                    <Input id="input-search" type="search" placeholder="Search..." />
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Other Form Components Section */}
          <section>
            <h2 className="text-2xl font-semibold mb-6">Other Form Components</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="select-default">Select Dropdown</Label>
                  <Select id="select-default" defaultValue="">
                    <option value="" disabled>Choose an option</option>
                    <option value="option1">Option 1</option>
                    <option value="option2">Option 2</option>
                    <option value="option3">Option 3</option>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="select-disabled">Disabled Select</Label>
                  <Select id="select-disabled" disabled defaultValue="">
                    <option value="">Disabled dropdown</option>
                  </Select>
                </div>
              </div>

              <div className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="textarea-default">Textarea</Label>
                  <Textarea 
                    id="textarea-default" 
                    placeholder="Enter your message..." 
                    rows={4}
                  />
                </div>
              </div>
            </div>
          </section>

          {/* Checkboxes Section */}
          <section>
            <h2 className="text-2xl font-semibold mb-6">Checkboxes</h2>
            
            <div className="space-y-4">
              <Checkbox label="Default checkbox" />
              <Checkbox label="Checked checkbox" defaultChecked />
              <Checkbox label="Disabled checkbox" disabled />
              <Checkbox label="Disabled checked checkbox" disabled defaultChecked />
            </div>
          </section>

          {/* Form Example Section */}
          <section>
            <h2 className="text-2xl font-semibold mb-6">Form Example</h2>
            
            <div className="max-w-md">
              <form className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="form-name">Name</Label>
                  <Input id="form-name" type="text" placeholder="John Doe" />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="form-email">Email</Label>
                  <Input id="form-email" type="email" placeholder="john@example.com" />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="form-role">Role</Label>
                  <Select id="form-role" defaultValue="">
                    <option value="" disabled>Select your role</option>
                    <option value="developer">Developer</option>
                    <option value="designer">Designer</option>
                    <option value="manager">Manager</option>
                    <option value="other">Other</option>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="form-message">Message</Label>
                  <Textarea 
                    id="form-message" 
                    placeholder="Tell us about your project..." 
                    rows={4}
                  />
                </div>

                <div className="space-y-4">
                  <Checkbox label="I agree to the terms and conditions" />
                  <Checkbox label="Send me updates about new features" defaultChecked />
                </div>

                <div className="flex gap-4">
                  <Button variant="orange" type="submit">Submit</Button>
                  <Button variant="outline" type="button">Cancel</Button>
                </div>
              </form>
            </div>
          </section>

          {/* Colors Section */}
          <section>
            <h2 className="text-2xl font-semibold mb-6">Color Palette</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <ColorSwatch name="Orange 500" color="bg-orange-500" hex="#f97316" />
              <ColorSwatch name="Orange 600" color="bg-orange-600" hex="#ea580c" />
              <ColorSwatch name="Code Black" color="bg-[#36322F]" hex="#36322F" />
              <ColorSwatch name="Zinc 900" color="bg-zinc-900" hex="#18181b" />
              <ColorSwatch name="Zinc 100" color="bg-zinc-100" hex="#f4f4f5" />
              <ColorSwatch name="Zinc 200" color="bg-zinc-200" hex="#e4e4e7" />
              <ColorSwatch name="Red 500" color="bg-red-500" hex="#ef4444" />
              <ColorSwatch name="White" color="bg-white border" hex="#ffffff" />
            </div>
          </section>

          {/* Typography Section */}
          <section>
            <h2 className="text-2xl font-semibold mb-6">Typography</h2>
            <div className="space-y-6">
              <div>
                <h1 className="text-4xl font-bold">Heading 1</h1>
                <p className="text-sm text-zinc-500">text-4xl font-bold</p>
              </div>
              <div>
                <h2 className="text-3xl font-semibold">Heading 2</h2>
                <p className="text-sm text-zinc-500">text-3xl font-semibold</p>
              </div>
              <div>
                <h3 className="text-2xl font-semibold">Heading 3</h3>
                <p className="text-sm text-zinc-500">text-2xl font-semibold</p>
              </div>
              <div>
                <p className="text-lg">Large paragraph</p>
                <p className="text-sm text-zinc-500">text-lg</p>
              </div>
              <div>
                <p>Regular paragraph</p>
                <p className="text-sm text-zinc-500">Default size</p>
              </div>
              <div>
                <p className="text-sm text-zinc-500">Small muted text</p>
                <p className="text-sm text-zinc-500">text-sm text-zinc-500</p>
              </div>
            </div>
          </section>
        </div>
      </MainContent>
      
      <Footer />
    </Layout>
  )
}

function ColorSwatch({ name, color, hex }: { name: string; color: string; hex: string }) {
  return (
    <div className="space-y-2">
      <div className={`h-24 rounded-lg ${color}`} />
      <div>
        <p className="text-sm font-medium">{name}</p>
        <p className="text-xs text-zinc-500">{hex}</p>
      </div>
    </div>
  )
}

================
File: src/app/webhook-playground/page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { Layout, MainContent, Footer } from '@/components/layout/layout'
import { Header } from '@/components/layout/header'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { useRouter } from 'next/navigation'
import { useConvexAuth, useQuery, useMutation } from "convex/react"
import { api } from "../../../convex/_generated/api"
import { Loader2, ArrowLeft, Webhook, Copy, Check, Trash2, CheckCircle, XCircle, Clock, AlertCircle, HelpCircle, ExternalLink } from 'lucide-react'
import Link from 'next/link'

export default function WebhookPlaygroundPage() {
  const router = useRouter()
  const { isLoading: authLoading, isAuthenticated } = useConvexAuth()
  const [copied, setCopied] = useState(false)
  const [expandedPayload, setExpandedPayload] = useState<string | null>(null)
  const [previousCount, setPreviousCount] = useState(0)
  const [newWebhooks, setNewWebhooks] = useState<Set<string>>(new Set())
  
  // Convex queries and mutations
  const webhookPayloads = useQuery(api.webhookPlayground.getWebhookPayloads, { limit: 50 })
  const clearPayloads = useMutation(api.webhookPlayground.clearWebhookPayloads)
  
  // Track new webhooks
  useEffect(() => {
    if (webhookPayloads) {
      console.log('Webhook payloads updated:', webhookPayloads.length, 'items')
      if (webhookPayloads.length > previousCount && previousCount > 0) {
        // New webhooks arrived
        const newIds = new Set<string>()
        const numNew = webhookPayloads.length - previousCount
        for (let i = 0; i < numNew && i < webhookPayloads.length; i++) {
          newIds.add(webhookPayloads[i]._id)
        }
        setNewWebhooks(newIds)
        
        // Clear the highlight after 3 seconds
        setTimeout(() => {
          setNewWebhooks(new Set())
        }, 3000)
      }
      setPreviousCount(webhookPayloads.length)
    }
  }, [webhookPayloads, previousCount])
  
  // Redirect if not authenticated
  if (!authLoading && !isAuthenticated) {
    router.push('/')
    return null
  }
  
  // Show loading while auth is loading
  if (authLoading || webhookPayloads === undefined) {
    return (
      <Layout>
        <Header />
        <MainContent maxWidth="7xl" className="py-12">
          <div className="max-w-6xl mx-auto">
            <div className="flex items-center justify-center py-20">
              <div className="text-center">
                <Loader2 className="h-8 w-8 animate-spin text-orange-500 mx-auto mb-4" />
                <p className="text-gray-500">Loading webhook playground...</p>
              </div>
            </div>
          </div>
        </MainContent>
        <Footer />
      </Layout>
    )
  }

  const webhookUrl = typeof window !== 'undefined' 
    ? `${window.location.origin}/api/test-webhook`
    : 'Loading...'

  const copyWebhookUrl = () => {
    navigator.clipboard.writeText(webhookUrl)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const formatTimeAgo = (timestamp: number) => {
    const seconds = Math.floor((Date.now() - timestamp) / 1000)
    
    if (seconds < 60) return 'Just now'
    if (seconds < 3600) return `${Math.floor(seconds / 60)} mins ago`
    if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`
    return `${Math.floor(seconds / 86400)} days ago`
  }

  const handleClearAll = async () => {
    if (confirm('Are you sure you want to clear all webhook payloads?')) {
      await clearPayloads()
    }
  }
  
  return (
    <Layout>
      <Header />
      
      <MainContent maxWidth="7xl" className="py-12">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center gap-4 mb-8">
            <Link href="/" className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
              <ArrowLeft className="h-5 w-5" />
            </Link>
            <h1 className="text-3xl font-bold flex items-center gap-2">
              <Webhook className="h-8 w-8 text-orange-500" />
              Webhook Playground
            </h1>
          </div>
          
          {/* Webhook URL Section */}
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold">Test Webhook Endpoint</h2>
              <div className="relative group">
                <HelpCircle className="h-5 w-5 text-gray-400 cursor-help" />
                <div className="absolute right-0 mt-2 w-80 p-4 bg-gray-900 text-white text-sm rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                  <div className="absolute -top-2 right-2 w-0 h-0 border-l-8 border-l-transparent border-r-8 border-r-transparent border-b-8 border-b-gray-900"></div>
                  <h4 className="font-medium mb-2">How to use the Webhook Playground</h4>
                  <ol className="space-y-1 list-decimal list-inside">
                    <li>Copy the webhook URL above</li>
                    <li>Go to your website settings and click the settings icon</li>
                    <li>Select &quot;Webhook only&quot; or &quot;Email and Webhook&quot; as the notification type</li>
                    <li>Paste the webhook URL and save</li>
                    <li>When changes are detected, webhooks will appear here in real-time</li>
                  </ol>
                </div>
              </div>
            </div>
            
            {webhookUrl.includes('localhost') && (
              <div className="mb-4 p-4 bg-orange-50 border border-orange-200 rounded-lg">
                <div className="flex items-start gap-3">
                  <AlertCircle className="h-5 w-5 text-orange-600 flex-shrink-0 mt-0.5" />
                  <div>
                    <p className="text-sm font-medium text-orange-900">Localhost URLs won&apos;t work!</p>
                    <p className="text-sm text-orange-700 mt-1">
                      Convex runs in the cloud and cannot access localhost. Use one of these options:
                    </p>
                    <ul className="text-sm text-orange-700 mt-2 space-y-1 list-disc list-inside">
                      <li>Use <a href="https://ngrok.com" target="_blank" className="underline font-medium">ngrok</a> to expose your local server: <code className="bg-orange-100 px-1 rounded">ngrok http 3000</code></li>
                      <li>Deploy your app to Vercel, Netlify, or another hosting service</li>
                      <li>Use a webhook testing service like <a href="https://webhook.site" target="_blank" className="underline font-medium">webhook.site</a></li>
                    </ul>
                  </div>
                </div>
              </div>
            )}
            
            <div className="flex items-center gap-2">
              <Input
                value={webhookUrl}
                readOnly
                className="flex-1 font-mono text-sm"
              />
              <Button
                variant="orange"
                size="sm"
                onClick={copyWebhookUrl}
              >
                {copied ? (
                  <>
                    <Check className="h-4 w-4 mr-1" />
                    Copied!
                  </>
                ) : (
                  <>
                    <Copy className="h-4 w-4 mr-1" />
                    Copy URL
                  </>
                )}
              </Button>
            </div>
            <p className="text-sm text-gray-500 mt-2">
              Use this URL in your website notification settings to test webhook deliveries
            </p>
          </div>

          {/* Webhook Payloads List */}
          <div className="bg-white rounded-lg shadow-sm">
            <div className="px-6 py-4 border-b flex items-center justify-between">
              <h2 className="text-lg font-semibold flex items-center gap-2">
                Received Webhooks
                {webhookPayloads.length > 0 && (
                  <span className="text-sm font-normal text-gray-500">
                    ({webhookPayloads.length} total)
                  </span>
                )}
                <span className="flex items-center gap-1 text-xs text-orange-600">
                  <span className="w-2 h-2 bg-orange-500 rounded-full animate-pulse"></span>
                  Live
                </span>
              </h2>
              {webhookPayloads.length > 0 && (
                <Button
                  variant="code"
                  size="sm"
                  onClick={handleClearAll}
                >
                  <Trash2 className="h-4 w-4 mr-1" />
                  Clear All
                </Button>
              )}
            </div>

            {webhookPayloads.length === 0 ? (
              <div className="p-12 text-center">
                <Webhook className="h-12 w-12 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500">No webhooks received yet</p>
                <p className="text-sm text-gray-400 mt-2">
                  Configure a website to use the webhook URL above and trigger a change
                </p>
              </div>
            ) : (
              <div className="divide-y">
                {webhookPayloads.map((payload) => (
                  <div 
                    key={payload._id} 
                    className={`p-4 hover:bg-gray-50 transition-all ${
                      newWebhooks.has(payload._id) ? 'bg-orange-50 border-l-4 border-orange-500' : ''
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-3">
                            {payload.status === 'success' ? (
                              <CheckCircle className="h-5 w-5 text-black" />
                            ) : (
                              <XCircle className="h-5 w-5 text-orange-500" />
                            )}
                            <span className="font-medium">
                              {payload.payload?.event || 'Webhook Event'}
                            </span>
                            <span className="text-sm text-gray-500 flex items-center gap-1">
                              <Clock className="h-3 w-3" />
                              {formatTimeAgo(payload.receivedAt)}
                            </span>
                            {newWebhooks.has(payload._id) && (
                              <span className="text-xs bg-orange-500 text-white px-2 py-1 rounded-full">
                                New
                              </span>
                            )}
                          </div>
                          {/* Website URL on the right */}
                          {payload.payload?.website?.url && (
                            <a 
                              href={payload.payload.website.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-sm text-black hover:text-gray-700 hover:underline flex items-center gap-1"
                            >
                              {payload.payload.website.url}
                              <ExternalLink className="h-3 w-3" />
                            </a>
                          )}
                        </div>

                        {/* JSON Payload */}
                        <div className="mt-2 mb-3">
                          <div className="bg-gray-900 text-gray-100 rounded-lg overflow-hidden">
                            <div className="flex items-center justify-between p-3 border-b border-gray-800">
                              <span className="text-xs font-medium">Payload</span>
                              <Button
                                variant="code"
                                size="sm"
                                className="h-6 px-2 text-xs"
                                onClick={() => setExpandedPayload(
                                  expandedPayload === payload._id ? null : payload._id
                                )}
                              >
                                {expandedPayload === payload._id ? 'Collapse' : 'Expand'}
                              </Button>
                            </div>
                            <div className="p-3">
                              <div className={expandedPayload === payload._id ? "overflow-y-auto max-h-96" : "overflow-hidden max-h-48"}>
                                <pre className="text-xs whitespace-pre-wrap break-all">
                                  <code>
                                    {expandedPayload === payload._id 
                                      ? JSON.stringify(payload.payload, null, 2)
                                      : JSON.stringify(payload.payload, null, 2)
                                          .split('\n')
                                          .slice(0, 12)
                                          .join('\n') + 
                                          (JSON.stringify(payload.payload, null, 2).split('\n').length > 12 ? '\n  ...' : '')
                                    }
                                  </code>
                                </pre>
                              </div>
                            </div>
                          </div>
                          
                          {/* Headers - only show when expanded */}
                          {expandedPayload === payload._id && payload.headers && (
                            <details className="mt-3">
                              <summary className="text-sm text-gray-600 cursor-pointer hover:text-gray-800">
                                Request Headers
                              </summary>
                              <div className="mt-2 bg-gray-100 rounded-lg p-3 overflow-hidden">
                                <div className="overflow-y-auto max-h-48 scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200">
                                  <pre className="text-xs text-gray-700 whitespace-pre-wrap break-all">
                                    <code>{JSON.stringify(payload.headers, null, 2)}</code>
                                  </pre>
                                </div>
                              </div>
                            </details>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

        </div>
      </MainContent>
      
      <Footer />
    </Layout>
  )
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 25 95% 53%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 25 95% 53%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 25 95% 53%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Providers } from "./providers";

const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Firecrawl Observer",
  description: "Monitor websites with Firecrawl change tracking",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${inter.variable} font-sans antialiased`}
      >
        <Providers>
          {children}
        </Providers>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { Layout, MainContent, Footer } from '@/components/layout/layout'
import { Header } from '@/components/layout/header'
import { Hero } from '@/components/layout/hero'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Select } from '@/components/ui/select'
import { Loader2, Clock, ExternalLink, LogIn, Download, Grid, List, X, Play, Pause, ChevronLeft, ChevronRight, Globe, Activity, CheckCircle, AlertCircle, BarChart3, RefreshCw, Settings2, FileText, Network, Search } from 'lucide-react'
import { useAuthActions } from "@convex-dev/auth/react"
import { useConvexAuth, useMutation, useQuery, useAction } from "convex/react"
import { api } from "../../convex/_generated/api"
import { WebhookConfigModal } from '@/components/WebhookConfigModal'
import { ApiKeyManager } from '@/components/ApiKeyManager'

// Helper function to format interval display
function formatInterval(minutes: number | undefined): string {
  if (!minutes || minutes === 0) return '1 hour'; // Default to 1 hour if not set
  if (minutes < 1) return `${minutes * 60} seconds`;
  if (minutes < 60) return `${minutes} minutes`;
  if (minutes < 1440) {
    const hours = minutes / 60;
    return hours === 1 ? '1 hour' : `${hours} hours`;
  }
  const days = minutes / 1440;
  return days === 1 ? '1 day' : `${days} days`;
}

export default function HomePage() {
  const { isLoading: authLoading, isAuthenticated } = useConvexAuth()
  const { signIn } = useAuthActions()
  
  // Auth state
  const [authMode, setAuthMode] = useState<'signIn' | 'signUp'>('signIn')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [authError, setAuthError] = useState('')
  const [isAuthenticating, setIsAuthenticating] = useState(false)
  
  // Website monitoring state
  const [url, setUrl] = useState('')
  const [checkInterval, setCheckInterval] = useState('60') // default 60 minutes
  const [error, setError] = useState('')
  const [isAdding, setIsAdding] = useState(false)
  const [monitorType, setMonitorType] = useState<'single_page' | 'full_site'>('single_page')
  const [crawlLimit, setCrawlLimit] = useState('5')
  const [crawlDepth, setCrawlDepth] = useState('3')
  
  // Convex queries and mutations
  const websites = useQuery(api.websites.getUserWebsites)
  const createWebsite = useMutation(api.websites.createWebsite)
  const deleteWebsite = useMutation(api.websites.deleteWebsite)
  const toggleWebsite = useMutation(api.websites.toggleWebsiteActive)
  const updateWebsite = useMutation(api.websites.updateWebsite)
  const triggerScrape = useAction(api.firecrawl.triggerScrape)

  // Track scrape results
  const [scrapeResults, setScrapeResults] = useState<Record<string, { status: string, message: string }>>({})
  const [viewingChangesFor, setViewingChangesFor] = useState<string | null>(null)
  const [viewingSpecificScrape, setViewingSpecificScrape] = useState<string | null>(null)
  const [expandedDiffId, setExpandedDiffId] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState<'monitoring' | 'checkLog' | 'apiKeys'>('monitoring')
  const [checkLogFilter, setCheckLogFilter] = useState<'all' | 'changed'>('all')
  const [checkLogView, setCheckLogView] = useState<'list' | 'tile'>('list')
  const [processingWebsites, setProcessingWebsites] = useState<Set<string>>(new Set())
  const [showAddedLines, setShowAddedLines] = useState(true)
  const [showRemovedLines, setShowRemovedLines] = useState(true)
  const [checkLogPage, setCheckLogPage] = useState(1)
  const ITEMS_PER_PAGE_TILE = 9
  const ITEMS_PER_PAGE_LIST = 10
  
  // Webhook configuration modal state
  const [showWebhookModal, setShowWebhookModal] = useState(false)
  const [editingWebsiteId, setEditingWebsiteId] = useState<string | null>(null)
  const [pendingWebsite, setPendingWebsite] = useState<{
    url: string
    name: string
  } | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [showDemoWebsites, setShowDemoWebsites] = useState(false)
  
  // Get latest scrape with changes for the selected website
  const latestScrapeHistory = useQuery(
    api.websites.getWebsiteScrapeHistory, 
    viewingChangesFor ? { websiteId: viewingChangesFor as any, limit: 5 } : "skip" // eslint-disable-line @typescript-eslint/no-explicit-any
  )
  
  // Get latest scrape for each website
  const latestScrapes = useQuery(api.websites.getLatestScrapeForWebsites)
  
  // Get all scrape results for check log
  const allScrapeHistory = useQuery(api.websites.getAllScrapeHistory)

  // Handle escape key for modals
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        if (viewingSpecificScrape) {
          setViewingSpecificScrape(null)
        }
        if (showWebhookModal) {
          setShowWebhookModal(false)
          setEditingWebsiteId(null)
          setPendingWebsite(null)
        }
      }
    }
    
    document.addEventListener('keydown', handleEscape)
    return () => document.removeEventListener('keydown', handleEscape)
  }, [viewingSpecificScrape, showWebhookModal])

  const handleAuth = async (e: React.FormEvent) => {
    e.preventDefault()
    setAuthError('')
    setIsAuthenticating(true)

    try {
      await signIn("password", {
        email,
        password,
        flow: authMode,
      })
      setEmail('')
      setPassword('')
    } catch (error: any) { // eslint-disable-line @typescript-eslint/no-explicit-any
      setAuthError(error.message || 'Authentication failed')
    } finally {
      setIsAuthenticating(false)
    }
  }

  const handleAddWebsite = () => {
    if (!url) {
      setError('Please enter a URL')
      return
    }

    // Add https:// if no protocol is specified
    let processedUrl = url.trim()
    if (!processedUrl.match(/^https?:\/\//)) {
      processedUrl = 'https://' + processedUrl
    }

    // Basic URL validation and auto-generate name
    let autoGeneratedName = ''
    try {
      const urlObj = new URL(processedUrl)
      // Generate a friendly name from the hostname
      autoGeneratedName = urlObj.hostname
        .replace('www.', '')
        .split('.')[0]
        .charAt(0).toUpperCase() + urlObj.hostname.replace('www.', '').split('.')[0].slice(1)
    } catch {
      setError('Please enter a valid URL')
      return
    }

    setError('')
    
    // Store the pending website data and show the modal
    setPendingWebsite({
      url: processedUrl,
      name: autoGeneratedName
    })
    setShowWebhookModal(true)
    setUrl('')
  }

  const formatTimeAgo = (timestamp: number | undefined) => {
    if (!timestamp) return 'Never'
    
    const seconds = Math.floor((Date.now() - timestamp) / 1000)
    
    if (seconds < 60) return 'Just now'
    if (seconds < 3600) return `${Math.floor(seconds / 60)} mins ago`
    if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`
    return `${Math.floor(seconds / 86400)} days ago`
  }

  const downloadMarkdown = (markdown: string | undefined, websiteName: string, timestamp: number) => {
    if (!markdown) {
      console.error('No markdown content available to download')
      return
    }
    const blob = new Blob([markdown], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${websiteName.replace(/[^a-z0-9]/gi, '_')}_${new Date(timestamp).toISOString().split('T')[0]}.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleCheckNow = async (websiteId: string) => {
    setProcessingWebsites(prev => new Set([...prev, websiteId]))
    
    try {
      await triggerScrape({ websiteId: websiteId as any }) // eslint-disable-line @typescript-eslint/no-explicit-any
      // The UI will automatically update via Convex reactive queries
      
      // Keep processing indicator for a bit to show the scrape is running
      setTimeout(() => {
        setProcessingWebsites(prev => {
          const newSet = new Set(prev)
          newSet.delete(websiteId)
          return newSet
        })
      }, 5000) // Increased to 5 seconds
    } catch (error) {
      console.error('Failed to trigger scrape:', error)
      setScrapeResults(prev => ({ 
        ...prev, 
        [websiteId]: { 
          status: 'error', 
          message: 'Failed to check website: ' + (error as any).message // eslint-disable-line @typescript-eslint/no-explicit-any 
        } 
      }))
      setProcessingWebsites(prev => {
        const newSet = new Set(prev)
        newSet.delete(websiteId)
        return newSet
      })
      
      // Clear error after 5 seconds
      setTimeout(() => {
        setScrapeResults(prev => {
          const newResults = { ...prev }
          delete newResults[websiteId]
          return newResults
        })
      }, 5000)
    }
  }

  if (authLoading) {
    return (
      <Layout>
        <div className="flex items-center justify-center min-h-screen">
          <Loader2 className="h-8 w-8 animate-spin text-orange-500" />
        </div>
      </Layout>
    )
  }

  if (!isAuthenticated) {
    return (
      <Layout>
        <div className="flex-1 flex items-center justify-center px-4 sm:px-6 lg:px-8">
          <div className="max-w-7xl w-full mx-auto">
            <div className="grid lg:grid-cols-2 gap-12 items-center">
              {/* Left side - Hero content */}
              <div className="text-center lg:text-left">
                <h1 className="text-[3rem] lg:text-[4rem] font-semibold tracking-tight leading-none mb-6">
                  <span className="bg-gradient-to-tr from-red-600 to-yellow-500 bg-clip-text text-transparent block">
                    Firecrawl
                  </span>
                  <span className="text-black block">
                    Observer
                  </span>
                </h1>
                <p className="text-xl text-zinc-600 dark:text-zinc-400">
                  Monitor websites with Firecrawl change tracking
                </p>
              </div>
              
              {/* Right side - Sign in form */}
              <div className="w-full max-w-md mx-auto lg:mx-0">
                <div className="bg-white rounded-lg p-8 shadow-sm">
                  <div className="flex items-center justify-center mb-6">
                    <h2 className="text-2xl font-semibold">
                      {authMode === 'signIn' ? 'Welcome Back' : 'Get Started'}
                    </h2>
                  </div>
                  <p className="text-center text-zinc-600 mb-6">
                    {authMode === 'signIn' 
                      ? 'Sign in to your account to continue monitoring websites' 
                      : 'Create an account to start monitoring website changes'}
                  </p>
                  
                  <form onSubmit={handleAuth} className="space-y-4">
                    <div className="space-y-2">
                      <label htmlFor="email" className="text-sm font-medium text-zinc-700">
                        Email
                      </label>
                      <Input 
                        id="email"
                        type="email" 
                        placeholder="you@example.com" 
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        required
                        autoComplete="email"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <label htmlFor="password" className="text-sm font-medium text-zinc-700">
                        Password
                      </label>
                      <Input 
                        id="password"
                        type="password" 
                        placeholder="••••••••" 
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                        autoComplete={authMode === 'signIn' ? 'current-password' : 'new-password'}
                      />
                    </div>
                    
                    {authError && (
                      <p className="text-sm text-orange-500">{authError}</p>
                    )}
                    
                    <Button 
                      type="submit" 
                      variant="orange" 
                      className="w-full"
                      disabled={isAuthenticating}
                    >
                      {isAuthenticating ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          {authMode === 'signIn' ? 'Signing in...' : 'Creating account...'}
                        </>
                      ) : (
                        <>
                          <LogIn className="mr-2 h-4 w-4" />
                          {authMode === 'signIn' ? 'Sign In' : 'Sign Up'}
                        </>
                      )}
                    </Button>
                  </form>
                  
                  <p className="text-center text-sm text-zinc-600 mt-4">
                    {authMode === 'signIn' ? (
                      <>
                        Don&apos;t have an account?{' '}
                        <button
                          type="button"
                          onClick={() => setAuthMode('signUp')}
                          className="text-orange-600 hover:text-orange-700 font-medium"
                        >
                          Sign up
                        </button>
                      </>
                    ) : (
                      <>
                        Already have an account?{' '}
                        <button
                          type="button"
                          onClick={() => setAuthMode('signIn')}
                          className="text-orange-600 hover:text-orange-700 font-medium"
                        >
                          Sign in
                        </button>
                      </>
                    )}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <Footer />
      </Layout>
    )
  }
  
  // Main authenticated view (when isAuthenticated = true)
  return (
    <Layout>
      <Header ctaHref="https://github.com/new?template_name=firecrawl-observer&template_owner=your-org" />
      
      <Hero 
        title={
          <div className="flex flex-col leading-none">
            <span className="bg-gradient-to-tr from-red-600 to-yellow-500 bg-clip-text text-transparent">
              Firecrawl
            </span>
            <span className="text-black">
              Observer
            </span>
          </div>
        }
        subtitle="Monitor websites with Firecrawl change tracking"
      />
      
      <MainContent maxWidth="7xl" className="py-12">
        <div className="space-y-8">
          {/* Tab Navigation */}
          <div className="flex space-x-1 border-b">
            <button
              onClick={() => setActiveTab('monitoring')}
              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${
                activeTab === 'monitoring'
                  ? 'text-orange-600 border-orange-600'
                  : 'text-gray-600 border-transparent hover:text-gray-800'
              }`}
            >
              Websites
            </button>
            <button
              onClick={() => setActiveTab('checkLog')}
              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors relative ${
                activeTab === 'checkLog'
                  ? 'text-orange-600 border-orange-600'
                  : 'text-gray-600 border-transparent hover:text-gray-800'
              }`}
            >
              Change Tracking
            </button>
            <button
              onClick={() => setActiveTab('apiKeys')}
              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${
                activeTab === 'apiKeys'
                  ? 'text-orange-600 border-orange-600'
                  : 'text-gray-600 border-transparent hover:text-gray-800'
              }`}
            >
              API Keys
            </button>
          </div>

          {/* Tab Content */}
          {activeTab === 'monitoring' ? (
            <>
              {/* Websites Section */}
              <div className="space-y-4">
                {/* Header with Add Form */}
                <div className="bg-white rounded-lg shadow-sm p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-semibold">Monitored Websites</h3>
                    {websites && websites.length > 0 && (
                      <Button
                        variant="orange"
                        size="sm"
                        onClick={async () => {
                          const activeWebsites = websites.filter(w => w.isActive);
                          for (const website of activeWebsites) {
                            await handleCheckNow(website._id);
                          }
                        }}
                      >
                        Check All Active Sites
                      </Button>
                    )}
                  </div>
                  
                  {/* Add Website Form */}
                  <div className="border-t pt-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">Add New Website</label>
                    
                    <form onSubmit={(e) => {
                      e.preventDefault();
                      handleAddWebsite();
                    }} className="space-y-3">
                      <div className="flex items-center gap-2">
                        <Input 
                          type="text" 
                          placeholder="https://example.com" 
                          value={url}
                          onChange={(e) => setUrl(e.target.value)}
                          disabled={isAdding}
                          className="flex-1"
                        />
                        <Button 
                          type="submit"
                          variant="orange"
                          size="sm"
                          disabled={isAdding || !url.trim()}
                          className="whitespace-nowrap"
                        >
                          {isAdding ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Adding...
                            </>
                          ) : (
                            'Start Observing'
                          )}
                        </Button>
                      </div>
                    </form>
                    {error && (
                      <p className="text-sm text-orange-500 mt-2">{error}</p>
                    )}
                    <p className="text-xs text-gray-500 mt-2">
                      Configure monitor type, check intervals, and notifications after adding
                    </p>
                  </div>
                </div>

                {/* Monitored Websites List */}
                {websites && websites.length > 0 && (
                  <div className="bg-white rounded-lg shadow-sm">
                    {/* Search Header */}
                    <div className="p-4 border-b">
                      <div className="flex items-center justify-between">
                        <h4 className="font-medium text-gray-900">Your Websites</h4>
                        <span className="text-sm text-gray-500">{websites.length} site{websites.length !== 1 ? 's' : ''}</span>
                      </div>
                      <div className="mt-3">
                        <div className="relative">
                          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <Search className="h-4 w-4 text-gray-400" />
                          </div>
                          <Input
                            type="text"
                            placeholder="Search by name or URL..."
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            className="pl-10 h-9 text-sm"
                          />
                        </div>
                      </div>
                    </div>
                    
                    {/* Website List */}
                    <div className="divide-y divide-gray-100">
                      {(() => {
                        const filteredWebsites = websites
                          .filter(website => {
                            const query = searchQuery.toLowerCase()
                            return website.name.toLowerCase().includes(query) || 
                                   website.url.toLowerCase().includes(query)
                          })
                          .sort((a, b) => b._creationTime - a._creationTime)
                        
                        if (filteredWebsites.length === 0 && searchQuery) {
                          return (
                            <div className="text-center py-8 text-gray-500">
                              <Search className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                              <p className="text-lg font-medium">No websites found</p>
                              <p className="text-sm mt-1">Try searching with different keywords</p>
                            </div>
                          )
                        }
                        
                        return filteredWebsites.map((website) => {
                  const latestScrape = latestScrapes?.[website._id];
                  const isProcessing = processingWebsites.has(website._id);
                  const hasChanged = latestScrape?.changeStatus === 'changed';
                  
                  return (
                    <div 
                      key={website._id}
                      className={`p-4 hover:bg-gray-50 transition-colors ${
                        isProcessing 
                          ? 'bg-orange-50' 
                          : ''
                      }`}
                    >
                      <div className="flex items-center gap-4">
                        {/* Website image or icon */}
                        <div className="flex-shrink-0">
                          {latestScrape?.ogImage ? (
                            <img 
                              src={latestScrape.ogImage} 
                              alt={website.name}
                              className="w-12 h-12 object-cover rounded-lg"
                              onError={(e) => {
                                e.currentTarget.style.display = 'none';
                                e.currentTarget.parentElement!.innerHTML = '<div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center"><svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path></svg></div>';
                              }}
                            />
                          ) : (
                            <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
                              <Globe className="w-6 h-6 text-gray-400" />
                            </div>
                          )}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center justify-between">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <h4 className="text-base font-medium text-gray-900">{website.name}</h4>
                                <span className={`inline-flex items-center gap-1 px-1.5 py-0.5 rounded text-xs font-medium ${
                                  website.monitorType === 'full_site' 
                                    ? 'bg-orange-100 text-orange-700' 
                                    : 'bg-gray-100 text-gray-700'
                                }`}>
                                  {website.monitorType === 'full_site' ? 'Full Site' : 'Single Page'}
                                </span>
                                <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                                  website.isActive 
                                    ? 'bg-green-100 text-green-700' 
                                    : 'bg-gray-100 text-gray-500'
                                }`}>
                                  {website.isActive ? 'Active' : 'Paused'}
                                </span>
                              </div>
                              <a 
                                href={website.url} 
                                target="_blank" 
                                rel="noopener noreferrer"
                                className="text-sm text-gray-500 hover:text-gray-700 inline-flex items-center gap-1"
                              >
                                {website.url}
                                <ExternalLink className="w-3 h-3" />
                              </a>
                            </div>
                            
                            {/* Action buttons */}
                            <div className="flex items-center gap-1">
                              <Button 
                                variant="ghost"
                                size="sm"
                                onClick={() => setViewingChangesFor(website._id)}
                                title="View history"
                                className="h-8 px-3"
                              >
                                History
                              </Button>
                              <div className="flex items-center gap-1">
                                <Button 
                                  variant="ghost" 
                                  size="sm"
                                  onClick={() => {
                                    setEditingWebsiteId(website._id)
                                    setShowWebhookModal(true)
                                  }}
                                  title="Settings"
                                  className="w-8 h-8 p-0"
                                >
                                  <Settings2 className="h-4 w-4" />
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm"
                                  onClick={() => deleteWebsite({ websiteId: website._id })}
                                  title="Remove"
                                  className="w-8 h-8 p-0 hover:bg-red-50 hover:text-red-600"
                                >
                                  <X className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                          </div>
                          
                          {/* Bottom row with status */}
                          {isProcessing ? (
                            <div className="mt-2 flex items-center gap-2 text-orange-600">
                              <RefreshCw className="w-3 h-3 animate-spin" />
                              <span className="text-xs">Checking for changes...</span>
                            </div>
                          ) : (
                            <div className="mt-2 flex items-center justify-between text-xs text-gray-500">
                              <div className="flex items-center gap-3">
                                {latestScrape && latestScrape.changeStatus !== 'new' && (
                                  <div className="flex items-center gap-1">
                                    {hasChanged ? (
                                      <>
                                        <div className="w-2 h-2 bg-orange-500 rounded-full" />
                                        <span>Changes detected</span>
                                      </>
                                    ) : (
                                      <>
                                        <div className="w-2 h-2 bg-green-500 rounded-full" />
                                        <span>No changes</span>
                                      </>
                                    )}
                                  </div>
                                )}
                                <span>Checked {formatTimeAgo(website.lastChecked)}</span>
                                <span>Every {formatInterval(website.checkInterval)}</span>
                              </div>
                              <Button 
                                variant="ghost"
                                size="sm"
                                onClick={() => handleCheckNow(website._id)}
                                disabled={isProcessing}
                                className="text-xs"
                              >
                                {isProcessing ? (
                                  <>
                                    <Loader2 className="mr-1 h-3 w-3 animate-spin" />
                                    Checking
                                  </>
                                ) : (
                                  <>
                                    <RefreshCw className="mr-1 h-3 w-3" />
                                    Check Now
                                  </>
                                )}
                              </Button>
                            </div>
                            
                            {(() => {
                              const result = scrapeResults[website._id];
                              if (!result) return null;
                              return (
                                <div className={`mt-2 text-xs ${
                                  result.status === 'error' ? 'text-orange-600' : 
                                  'text-gray-600'
                                }`}>
                                  {result.message}
                                </div>
                              );
                            })()}
                          </div>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                        })
                      })()}
                    </div>
                  </div>
                )}
              </div>

          {/* Changes Modal */}
          {viewingChangesFor && latestScrapeHistory && latestScrapeHistory.length > 0 && (
            <div 
              className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
              onClick={(e) => {
                if (e.target === e.currentTarget) {
                  setViewingChangesFor(null)
                  setExpandedDiffId(null)
                }
              }}
            >
              <div className="bg-white rounded-lg max-w-4xl w-full max-h-[80vh] overflow-hidden">
                <div className="p-6 border-b">
                  <h3 className="text-xl font-semibold">Scrape History</h3>
                  <p className="text-sm text-zinc-600 mt-1">
                    Showing recent checks and changes for this website
                  </p>
                </div>
                <div className="p-6 overflow-y-auto max-h-[60vh]">
                  {/* Show history of scrapes */}
                  <div className="space-y-4">
                    {latestScrapeHistory.map((scrape, index) => (
                      <div key={scrape._id} className="border-b pb-4 last:border-0">
                        <div className="flex items-start gap-4">
                          {/* Scrape image thumbnail */}
                          {scrape.ogImage && index === 0 && (
                            <img 
                              src={scrape.ogImage}
                              alt="Page preview"
                              className="w-20 h-20 object-cover rounded flex-shrink-0"
                              onError={(e) => {
                                e.currentTarget.style.display = 'none'
                              }}
                            />
                          )}
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-2">
                              <span className="text-sm font-medium">
                                {formatTimeAgo(scrape.scrapedAt)}
                              </span>
                              <span className={`text-xs px-2 py-1 rounded ${
                                scrape.changeStatus === 'changed' ? 'bg-orange-100 text-orange-800' :
                                scrape.changeStatus === 'new' ? 'bg-gray-100 text-gray-800' :
                                scrape.changeStatus === 'same' ? 'bg-gray-100 text-gray-800' :
                                'bg-black text-white'
                              }`}>
                                {scrape.changeStatus}
                              </span>
                            </div>
                            
                            {scrape.title && index === 0 && (
                              <p className="text-sm font-medium mb-1">{scrape.title}</p>
                            )}
                            
                            {scrape.description && index === 0 && (
                              <p className="text-xs text-zinc-600 mb-2">{scrape.description}</p>
                            )}
                        
                        {scrape.changeStatus === 'changed' && scrape.diff ? (
                          <>
                            <Button
                              variant="outline"
                              size="sm"
                              className="mt-2"
                              onClick={() => setExpandedDiffId(expandedDiffId === scrape._id ? null : scrape._id)}
                            >
                              {expandedDiffId === scrape._id ? 'Hide diff' : 'View diff'}
                            </Button>
                            
                            {expandedDiffId === scrape._id && (
                              <div className="mt-3 rounded-lg overflow-hidden border border-gray-200">
                                <div className="bg-gray-900 p-4 max-h-96 overflow-y-auto">
                                  <div className="font-mono text-sm">
                                    {(scrape.diff.text || '').split('\n').map((line, lineIndex) => {
                                      const isAddition = line.startsWith('+') && !line.startsWith('+++');
                                      const isDeletion = line.startsWith('-') && !line.startsWith('---');
                                      const isContext = line.startsWith('@@');
                                      const isFileHeader = line.startsWith('+++') || line.startsWith('---');
                                      
                                      // Filter based on checkboxes
                                      if (isAddition && !showAddedLines) return null;
                                      if (isDeletion && !showRemovedLines) return null;
                                      
                                      return (
                                        <div
                                          key={lineIndex}
                                          className={`px-2 py-0.5 ${
                                            isAddition ? 'bg-green-900/30 text-green-300' :
                                            isDeletion ? 'bg-red-900/30 text-red-300' :
                                            isContext ? 'bg-black/30 text-gray-400 font-bold' :
                                            isFileHeader ? 'text-gray-400' :
                                            'text-gray-300'
                                          }`}
                                        >
                                          <span className="select-none text-gray-500 mr-2">
                                            {String(lineIndex + 1).padStart(4, ' ')}
                                          </span>
                                          <span>{line || ' '}</span>
                                        </div>
                                      );
                                    })}
                                  </div>
                                </div>
                                <div className="bg-gray-50 px-4 py-2 border-t flex items-center gap-4 text-sm">
                                  <label className="flex items-center gap-2 cursor-pointer">
                                    <input
                                      type="checkbox"
                                      checked={showAddedLines}
                                      onChange={(e) => setShowAddedLines(e.target.checked)}
                                      className="h-4 w-4 text-green-600 rounded focus:ring-green-500"
                                    />
                                    <span className="text-green-700">Show added</span>
                                  </label>
                                  <label className="flex items-center gap-2 cursor-pointer">
                                    <input
                                      type="checkbox"
                                      checked={showRemovedLines}
                                      onChange={(e) => setShowRemovedLines(e.target.checked)}
                                      className="h-4 w-4 text-red-600 rounded focus:ring-red-500"
                                    />
                                    <span className="text-red-700">Show removed</span>
                                  </label>
                                </div>
                              </div>
                            )}
                          </>
                        ) : scrape.changeStatus === 'new' && index === latestScrapeHistory.length - 1 ? (
                          <p className="text-sm text-zinc-600">Initial scrape - baseline established</p>
                        ) : scrape.changeStatus === 'same' ? (
                          <p className="text-sm text-zinc-600">No changes from previous scrape</p>
                        ) : null}
                          </div>
                        </div>
                      </div>
                    ))}
                    
                    {latestScrapeHistory.length === 0 && (
                      <p className="text-center text-zinc-600">No scrape history available yet.</p>
                    )}
                  </div>
                </div>
                <div className="p-6 border-t flex justify-end">
                  <Button size="sm" onClick={() => {
                    setViewingChangesFor(null)
                    setExpandedDiffId(null)
                  }}>
                    Close
                  </Button>
                </div>
              </div>
            </div>
          )}
            </>
          ) : activeTab === 'checkLog' ? (
            /* Check Log Tab */
            <div className="space-y-4">
              {/* Filter and view controls */}
              <div className="flex items-center justify-between">
                <div className="flex gap-2">
                  <Button
                    variant={checkLogFilter === 'all' ? 'orange' : 'code'}
                    size="sm"
                    onClick={() => {
                      setCheckLogFilter('all')
                      setCheckLogPage(1)
                    }}
                  >
                    All Checks
                  </Button>
                  <Button
                    variant={checkLogFilter === 'changed' ? 'orange' : 'code'}
                    size="sm"
                    onClick={() => {
                      setCheckLogFilter('changed')
                      setCheckLogPage(1)
                    }}
                  >
                    Changed Only
                  </Button>
                </div>
                
                <div className="flex items-center gap-4">
                  {processingWebsites.size > 0 && (
                    <div className="flex items-center gap-2 text-sm text-orange-600">
                      <Loader2 className="h-4 w-4 animate-spin" />
                      <span>Processing {processingWebsites.size} check{processingWebsites.size > 1 ? 's' : ''}...</span>
                    </div>
                  )}
                  
                  <div className="flex gap-1">
                    <Button
                      variant={checkLogView === 'list' ? 'code' : 'outline'}
                      size="sm"
                      onClick={() => {
                        setCheckLogView('list')
                        setCheckLogPage(1)
                      }}
                      className="px-2"
                    >
                      <List className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={checkLogView === 'tile' ? 'code' : 'outline'}
                      size="sm"
                      onClick={() => {
                        setCheckLogView('tile')
                        setCheckLogPage(1)
                      }}
                      className="px-2"
                    >
                      <Grid className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>

              {/* Check log entries */}
              {(() => {
                // Filter and paginate data
                const filteredData = allScrapeHistory?.filter(scrape => 
                  checkLogFilter === 'all' || scrape.changeStatus === 'changed'
                ) || []
                
                const itemsPerPage = checkLogView === 'tile' ? ITEMS_PER_PAGE_TILE : ITEMS_PER_PAGE_LIST
                const totalPages = Math.ceil(filteredData.length / itemsPerPage)
                const startIndex = (checkLogPage - 1) * itemsPerPage
                const endIndex = startIndex + itemsPerPage
                const paginatedData = filteredData.slice(startIndex, endIndex)
                
                // Reset to page 1 if current page is out of bounds
                if (checkLogPage > totalPages && totalPages > 0) {
                  setCheckLogPage(1)
                }
                
                return (
                  <>
                    {checkLogView === 'list' ? (
                      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
                        <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Status
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Website
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Time
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Page Title
                            </th>
                            <th className="relative px-6 py-3">
                              <span className="sr-only">Actions</span>
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {/* Show loading entries for websites being processed */}
                          {websites && Array.from(processingWebsites).map(websiteId => {
                            const website = websites.find(w => w._id === websiteId)
                            if (!website) return null
                            return (
                              <tr key={`loading-${websiteId}`} className="bg-orange-50 animate-pulse">
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <span className="inline-flex items-center text-xs px-2 py-1 rounded-full bg-orange-100 text-orange-800">
                                    <Loader2 className="mr-1 h-3 w-3 animate-spin" />
                                    Checking...
                                  </span>
                                </td>
                                <td className="px-6 py-4">
                                  <div className="text-sm font-medium text-gray-900">{website.name}</div>
                                  <div className="text-xs text-gray-500 truncate max-w-xs">{website.url}</div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                  Now
                                </td>
                                <td className="px-6 py-4 text-sm text-gray-500">
                                  <div className="h-4 bg-gray-200 rounded animate-pulse"></div>
                                </td>
                                <td className="px-6 py-4 text-right text-sm font-medium">
                                  <div className="h-8 w-20 bg-gray-200 rounded animate-pulse"></div>
                                </td>
                              </tr>
                            )
                          })}
                          {paginatedData.map((scrape) => (
                        <tr key={scrape._id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`inline-flex text-xs px-2 py-1 rounded-full ${
                              scrape.changeStatus === 'changed' ? 'bg-orange-100 text-orange-800' :
                              scrape.changeStatus === 'new' ? 'bg-gray-100 text-gray-800' :
                              scrape.changeStatus === 'same' ? 'bg-gray-100 text-gray-800' :
                              'bg-black text-white'
                            }`}>
                              {scrape.changeStatus === 'changed' ? 'Changed' :
                               scrape.changeStatus === 'new' ? 'Initial' :
                               scrape.changeStatus === 'same' ? 'Same' :
                               'Removed'}
                            </span>
                          </td>
                          <td className="px-6 py-4">
                            <div className="text-sm font-medium text-gray-900">{scrape.websiteName}</div>
                            <div className="text-xs text-gray-500 truncate max-w-xs">{scrape.websiteUrl}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {formatTimeAgo(scrape.scrapedAt)}
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-500">
                            <div className="truncate max-w-xs">
                              {scrape.title || '-'}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <div className="flex gap-2 justify-end">
                              {scrape.changeStatus === 'changed' && scrape.diff && (
                                <Button
                                  variant="code"
                                  size="sm"
                                  onClick={() => {
                                    setViewingSpecificScrape(scrape._id);
                                  }}
                                >
                                  View Diff
                                </Button>
                              )}
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => downloadMarkdown(scrape.markdown, scrape.websiteName, scrape.scrapedAt)}
                                title="Download Markdown"
                              >
                                <Download className="h-3 w-3" />
                              </Button>
                            </div>
                          </td>
                        </tr>
                          ))}
                        </tbody>
                      </table>
                      
                      {(!allScrapeHistory || allScrapeHistory.length === 0) && (
                        <div className="text-center py-12">
                          <Clock className="mx-auto h-12 w-12 text-gray-300 mb-4" />
                          <p className="text-zinc-500">No checks recorded yet. Start monitoring websites to see the check log.</p>
                        </div>
                      )}
                      
                      {filteredData.length === 0 && allScrapeHistory && allScrapeHistory.length > 0 && (
                        <div className="text-center py-12">
                          <p className="text-zinc-500">No changes detected in the check log.</p>
                        </div>
                      )}
                    </div>
                    ) : (
                      /* Tile View */
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {/* Show loading tiles for websites being processed */}
                        {websites && Array.from(processingWebsites).map(websiteId => {
                          const website = websites.find(w => w._id === websiteId)
                          if (!website) return null
                          return (
                            <div key={`loading-tile-${websiteId}`} className="bg-white rounded-lg shadow-sm overflow-hidden border border-orange-200 animate-pulse">
                              {/* Loading image placeholder */}
                              <div className="h-48 bg-gray-200"></div>
                              
                              <div className="p-4">
                                <div className="flex items-center justify-between mb-2">
                                  <h3 className="font-medium text-gray-900 truncate flex-1">{website.name}</h3>
                                  <span className="flex-shrink-0 text-xs px-2 py-1 rounded-full ml-2 bg-orange-100 text-orange-800 flex items-center">
                                    <Loader2 className="mr-1 h-3 w-3 animate-spin" />
                                    Checking
                                  </span>
                                </div>
                                
                                <div className="h-4 bg-gray-200 rounded mb-2"></div>
                                <div className="h-3 bg-gray-200 rounded w-3/4 mb-3"></div>
                                
                                <div className="flex items-center justify-between text-xs text-gray-500 mb-3">
                                  <span>Now</span>
                                  <a href={website.url} target="_blank" rel="noopener noreferrer" className="hover:text-gray-700 truncate max-w-[200px]">
                                    {website.url}
                                  </a>
                                </div>
                                
                                <div className="h-8 bg-gray-200 rounded"></div>
                              </div>
                            </div>
                          )
                        })}
                        {paginatedData.map((scrape) => (
                      <div key={scrape._id} className="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow overflow-hidden flex flex-col h-full">
                        {/* OG Image */}
                        {scrape.ogImage ? (
                          <div className="aspect-video w-full bg-gray-100">
                            <img 
                              src={scrape.ogImage} 
                              alt={scrape.websiteName}
                              className="w-full h-full object-cover"
                              onError={(e) => {
                                e.currentTarget.parentElement!.style.display = 'none'
                              }}
                            />
                          </div>
                        ) : (
                          <div className="h-48 bg-gray-100 flex items-center justify-center">
                            <ExternalLink className="h-12 w-12 text-gray-300" />
                          </div>
                        )}
                        
                        {/* Content */}
                        <div className="p-4 flex flex-col flex-1">
                          <div className="flex items-start justify-between mb-2">
                            <h3 className="font-medium text-gray-900 truncate flex-1">{scrape.websiteName}</h3>
                            <span className={`flex-shrink-0 text-xs px-2 py-1 rounded-full ml-2 ${
                              scrape.changeStatus === 'changed' ? 'bg-orange-100 text-orange-800' :
                              scrape.changeStatus === 'new' ? 'bg-gray-100 text-gray-800' :
                              scrape.changeStatus === 'same' ? 'bg-gray-100 text-gray-800' :
                              'bg-black text-white'
                            }`}>
                              {scrape.changeStatus === 'changed' ? 'Changed' :
                               scrape.changeStatus === 'new' ? 'Initial' :
                               scrape.changeStatus === 'same' ? 'Same' :
                               'Removed'}
                            </span>
                          </div>
                          
                          <div className="flex-1">
                            {scrape.title && (
                              <p className="text-sm text-gray-700 mb-2 line-clamp-2">{scrape.title}</p>
                            )}
                            
                            {scrape.description && (
                              <p className="text-xs text-gray-500 mb-3 line-clamp-2">{scrape.description}</p>
                            )}
                          </div>
                          
                          <div className="flex items-center justify-between text-xs text-gray-500 mb-3">
                            <span>{formatTimeAgo(scrape.scrapedAt)}</span>
                            <a 
                              href={scrape.websiteUrl} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="hover:text-gray-700"
                            >
                              <ExternalLink className="h-3 w-3" />
                            </a>
                          </div>
                          
                          <div className="flex gap-2">
                            <Button
                              variant="orange"
                              size="sm"
                              className="flex-1"
                              onClick={() => downloadMarkdown(scrape.markdown, scrape.websiteName, scrape.scrapedAt)}
                            >
                              <Download className="h-3 w-3 mr-1" />
                              Download
                            </Button>
                            {scrape.changeStatus === 'changed' && scrape.diff && (
                              <Button
                                variant="code"
                                size="sm"
                                className="flex-1"
                                onClick={() => {
                                  setViewingSpecificScrape(scrape._id);
                                }}
                              >
                                View Diff
                              </Button>
                            )}
                          </div>
                        </div>
                      </div>
                        ))}
                        
                        {(!allScrapeHistory || allScrapeHistory.length === 0) && (
                          <div className="col-span-full text-center py-12">
                            <Clock className="mx-auto h-12 w-12 text-gray-300 mb-4" />
                            <p className="text-zinc-500">No checks recorded yet. Start monitoring websites to see the check log.</p>
                          </div>
                        )}
                        
                        {filteredData.length === 0 && allScrapeHistory && allScrapeHistory.length > 0 && (
                          <div className="col-span-full text-center py-12">
                            <p className="text-zinc-500">No changes detected in the check log.</p>
                          </div>
                        )}
                      </div>
                    )}
                    
                    {/* Pagination Controls */}
                    {totalPages > 1 && (
                      <div className="mt-6 flex items-center justify-between">
                        <div className="text-sm text-gray-600">
                          Showing {startIndex + 1}-{Math.min(endIndex, filteredData.length)} of {filteredData.length} checks (latest)
                        </div>
                        <div className="flex items-center gap-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setCheckLogPage(checkLogPage - 1)}
                            disabled={checkLogPage === 1}
                            className="gap-1"
                          >
                            <ChevronLeft className="h-3 w-3" />
                            Previous
                          </Button>
                          
                          {/* Page numbers */}
                          <div className="flex gap-1">
                            {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => {
                              // Show first page, last page, and pages around current
                              if (
                                page === 1 ||
                                page === totalPages ||
                                (page >= checkLogPage - 1 && page <= checkLogPage + 1)
                              ) {
                                return (
                                  <Button
                                    key={page}
                                    variant={page === checkLogPage ? 'code' : 'outline'}
                                    size="sm"
                                    onClick={() => setCheckLogPage(page)}
                                    className="min-w-[40px]"
                                  >
                                    {page}
                                  </Button>
                                )
                              } else if (
                                page === checkLogPage - 2 || 
                                page === checkLogPage + 2
                              ) {
                                return <span key={page} className="px-2">...</span>
                              }
                              return null
                            })}
                          </div>
                          
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setCheckLogPage(checkLogPage + 1)}
                            disabled={checkLogPage === totalPages}
                            className="gap-1"
                          >
                            Next
                            <ChevronRight className="h-3 w-3" />
                          </Button>
                        </div>
                      </div>
                    )}
                  </>
                )
              })()}
            </div>
          ) : activeTab === 'apiKeys' ? (
            <div className="max-w-4xl mx-auto">
              <ApiKeyManager />
            </div>
          ) : null}
        </div>
      </MainContent>
      
      {/* Specific Diff Modal - Outside tab content */}
      {viewingSpecificScrape && allScrapeHistory && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setViewingSpecificScrape(null)
            }
          }}
        >
          <div className="bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-hidden shadow-2xl">
            {(() => {
              const scrape = allScrapeHistory.find(s => s._id === viewingSpecificScrape);
              if (!scrape) return null;
              
              // Parse the diff text into lines
              const diffLines = scrape.diff?.text?.split('\n') || [];
              
              return (
                <>
                  <div className="p-6 border-b bg-gray-50">
                    <h3 className="text-xl font-semibold">Change Diff</h3>
                    <p className="text-sm text-zinc-600 mt-1">
                      {scrape.websiteName} • {formatTimeAgo(scrape.scrapedAt)}
                    </p>
                  </div>
                  <div className="overflow-y-auto max-h-[70vh] bg-gray-900">
                    {scrape.diff && scrape.diff.text ? (
                      <div className="p-4">
                        <div className="font-mono text-sm">
                          {diffLines.map((line, index) => {
                            const isAddition = line.startsWith('+') && !line.startsWith('+++');
                            const isDeletion = line.startsWith('-') && !line.startsWith('---');
                            const isContext = line.startsWith('@@');
                            const isFileHeader = line.startsWith('+++') || line.startsWith('---');
                            
                            // Filter based on checkboxes
                            if (isAddition && !showAddedLines) return null;
                            if (isDeletion && !showRemovedLines) return null;
                            
                            return (
                              <div
                                key={index}
                                className={`px-2 py-0.5 ${
                                  isAddition ? 'bg-green-900/30 text-green-300' :
                                  isDeletion ? 'bg-red-900/30 text-red-300' :
                                  isContext ? 'bg-black/30 text-gray-400 font-bold' :
                                  isFileHeader ? 'text-gray-400' :
                                  'text-gray-300'
                                }}`}
                              >
                                <span className="select-none text-gray-500 mr-2">
                                  {String(index + 1).padStart(4, ' ')}
                                </span>
                                <span>{line || ' '}</span>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ) : (
                      <div className="p-8 text-center">
                        <p className="text-gray-400">No diff available for this change.</p>
                      </div>
                    )}
                  </div>
                  <div className="p-4 border-t bg-gray-50 flex justify-between items-center">
                    <div className="flex gap-4 text-sm">
                      <label className="flex items-center gap-2 cursor-pointer">
                        <input
                          type="checkbox"
                          checked={showAddedLines}
                          onChange={(e) => setShowAddedLines(e.target.checked)}
                          className="h-4 w-4 text-green-600 rounded focus:ring-green-500"
                        />
                        <span className="text-green-700">Added</span>
                      </label>
                      <label className="flex items-center gap-2 cursor-pointer">
                        <input
                          type="checkbox"
                          checked={showRemovedLines}
                          onChange={(e) => setShowRemovedLines(e.target.checked)}
                          className="h-4 w-4 text-red-600 rounded focus:ring-red-500"
                        />
                        <span className="text-red-700">Removed</span>
                      </label>
                    </div>
                    <Button variant="code" size="sm" onClick={() => setViewingSpecificScrape(null)}>
                      Close
                    </Button>
                  </div>
                </>
              );
            })()}
          </div>
        </div>
      )}
      
      {/* Webhook Configuration Modal */}
      {(editingWebsiteId || pendingWebsite) && (
        <WebhookConfigModal
          isOpen={showWebhookModal}
          onClose={() => {
            setShowWebhookModal(false)
            setEditingWebsiteId(null)
            setPendingWebsite(null)
          }}
          onSave={async (config) => {
            if (pendingWebsite) {
              // Create new website with configured settings
              setIsAdding(true)
              try {
                const websiteId = await createWebsite({
                  url: pendingWebsite.url,
                  name: pendingWebsite.name,
                  checkInterval: config.checkInterval || 60,
                  notificationPreference: config.notificationPreference,
                  webhookUrl: config.webhookUrl,
                  monitorType: config.monitorType,
                  crawlLimit: config.crawlLimit,
                  crawlDepth: config.crawlDepth
                })
                setPendingWebsite(null)
              } catch (error: any) { // eslint-disable-line @typescript-eslint/no-explicit-any
                setError(error.message || 'Failed to add website')
              } finally {
                setIsAdding(false)
              }
            } else if (editingWebsiteId) {
              // Update existing website
              await updateWebsite({
                websiteId: editingWebsiteId as any, // eslint-disable-line @typescript-eslint/no-explicit-any
                notificationPreference: config.notificationPreference,
                webhookUrl: config.webhookUrl,
                checkInterval: config.checkInterval,
                monitorType: config.monitorType,
                crawlLimit: config.crawlLimit,
                crawlDepth: config.crawlDepth
              })
            }
            setShowWebhookModal(false)
            setEditingWebsiteId(null)
            setPendingWebsite(null)
          }}
          initialConfig={
            editingWebsiteId ? {
              notificationPreference: websites?.find(w => w._id === editingWebsiteId)?.notificationPreference || 'none',
              webhookUrl: websites?.find(w => w._id === editingWebsiteId)?.webhookUrl,
              checkInterval: websites?.find(w => w._id === editingWebsiteId)?.checkInterval || 60,
              monitorType: websites?.find(w => w._id === editingWebsiteId)?.monitorType || 'single_page',
              crawlLimit: websites?.find(w => w._id === editingWebsiteId)?.crawlLimit || 5,
              crawlDepth: websites?.find(w => w._id === editingWebsiteId)?.crawlDepth || 3
            } : {
              notificationPreference: 'none',
              checkInterval: 60,
              monitorType: 'single_page',
              crawlLimit: 5,
              crawlDepth: 3
            }
          }
          websiteName={pendingWebsite?.name || websites?.find(w => w._id === editingWebsiteId)?.name || 'Website'}
        />
      )}
      
      <Footer />
    </Layout>
  )
}

================
File: src/app/providers.tsx
================
'use client'

import { ConvexReactClient } from "convex/react"
import { ConvexAuthProvider } from "@convex-dev/auth/react"
import { ReactNode } from "react"

const convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!)

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ConvexAuthProvider client={convex}>
      {children}
    </ConvexAuthProvider>
  )
}

================
File: src/components/layout/header.tsx
================
'use client'

import Link from 'next/link'
import { useState } from 'react'
import { Github, LogOut, User, Loader2, ChevronDown, Webhook, Code } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { useAuthActions } from "@convex-dev/auth/react"
import { useConvexAuth, useQuery } from "convex/react"
import { api } from "../../../convex/_generated/api"

interface HeaderProps {
  showCTA?: boolean
  ctaText?: string
  ctaHref?: string
}

export function Header({ showCTA = true, ctaText = "Use this template", ctaHref = "#" }: HeaderProps) {
  const { isAuthenticated } = useConvexAuth()
  const { signOut } = useAuthActions()
  const [isSigningOut, setIsSigningOut] = useState(false)
  const currentUser = useQuery(api.users.getCurrentUser)

  const handleSignOut = async () => {
    setIsSigningOut(true)
    try {
      await signOut()
    } catch (error) {
      console.error('Sign out error:', error)
    } finally {
      setIsSigningOut(false)
    }
  }

  return (
    <header className="px-4 sm:px-6 lg:px-8 py-4 border-b border-zinc-200 bg-white">
      <div className="flex items-center justify-between max-w-7xl mx-auto">
        <Link href="/" className="flex items-center">
          <img src="/firecrawl-logo-with-fire.webp" alt="Firecrawl" className="h-8 w-auto" />
        </Link>
        
        <div className="flex items-center gap-4">
          {isAuthenticated ? (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="code" size="sm" className="gap-2">
                  <User className="h-4 w-4" />
                  <span className="hidden sm:inline-block">{currentUser?.email || 'Account'}</span>
                  <ChevronDown className="h-3 w-3" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <DropdownMenuLabel>
                  <div className="flex flex-col space-y-1">
                    <p className="text-sm font-medium leading-none">Account</p>
                    <p className="text-xs leading-none text-zinc-500">
                      {currentUser?.email || ''}
                    </p>
                  </div>
                </DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem asChild>
                  <Link href="/webhook-playground" className="flex items-center cursor-pointer">
                    <Webhook className="mr-2 h-4 w-4" />
                    <span>Webhook Playground</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuItem asChild>
                  <Link href="/api-docs" className="flex items-center cursor-pointer">
                    <Code className="mr-2 h-4 w-4" />
                    <span>API Documentation</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem 
                  onClick={handleSignOut}
                  disabled={isSigningOut}
                  className="cursor-pointer"
                >
                  {isSigningOut ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      <span>Logging out...</span>
                    </>
                  ) : (
                    <>
                      <LogOut className="mr-2 h-4 w-4" />
                      <span>Log out</span>
                    </>
                  )}
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          ) : (
            showCTA && (
              <Button
                variant="code"
                asChild
              >
                <Link href={ctaHref} target="_blank" rel="noopener noreferrer">
                  <Github className="mr-2 h-4 w-4" />
                  {ctaText}
                </Link>
              </Button>
            )
          )}
        </div>
      </div>
    </header>
  )
}

================
File: src/components/layout/hero.tsx
================
'use client'

import { cn } from '@/lib/utils'

interface HeroProps {
  title: string | React.ReactNode
  subtitle?: string
  className?: string
}

export function Hero({ title, subtitle, className }: HeroProps) {
  return (
    <div className={cn("px-4 sm:px-6 lg:px-8 pt-8 pb-6", className)}>
      <div className="max-w-4xl mx-auto text-center animate-slide-up">
        <h1 className="text-[2.5rem] lg:text-[3.8rem] font-semibold tracking-tight">
          {typeof title === 'string' ? (
            <span className="bg-gradient-to-tr from-red-600 to-yellow-500 bg-clip-text text-transparent">
              {title}
            </span>
          ) : (
            title
          )}
        </h1>
        
        {subtitle && (
          <p className="mt-4 text-lg text-zinc-600 dark:text-zinc-400">
            {subtitle}
          </p>
        )}
      </div>
    </div>
  )
}

================
File: src/components/layout/layout.tsx
================
import { cn } from '@/lib/utils'

interface LayoutProps {
  children: React.ReactNode
  className?: string
}

export function Layout({ children, className }: LayoutProps) {
  return (
    <div className={cn("min-h-screen flex flex-col bg-zinc-50", className)}>
      {children}
    </div>
  )
}

interface MainContentProps {
  children: React.ReactNode
  className?: string
  maxWidth?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '7xl' | 'full'
}

export function MainContent({ 
  children, 
  className,
  maxWidth = 'lg'
}: MainContentProps) {
  const maxWidthClasses = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-4xl',
    xl: 'max-w-xl',
    '2xl': 'max-w-2xl',
    '7xl': 'max-w-7xl',
    full: 'max-w-full'
  }

  return (
    <main className={cn(
      "flex-1 px-4 sm:px-6 lg:px-8",
      className
    )}>
      <div className={cn(
        "mx-auto",
        maxWidthClasses[maxWidth]
      )}>
        {children}
      </div>
    </main>
  )
}

interface FooterProps {
  children?: React.ReactNode
  className?: string
}

export function Footer({ children, className }: FooterProps) {
  return (
    <footer className={cn(
      "px-4 sm:px-6 lg:px-8 py-8 mt-auto",
      className
    )}>
      <div className="max-w-7xl mx-auto">
        {children}
      </div>
    </footer>
  )
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-[10px] text-sm font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-zinc-900 text-white hover:bg-zinc-800 [box-shadow:inset_0px_-2px_0px_0px_#18181b,_0px_1px_6px_0px_rgba(24,_24,_27,_58%)] hover:translate-y-[1px] hover:scale-[0.98] hover:[box-shadow:inset_0px_-1px_0px_0px_#18181b,_0px_1px_3px_0px_rgba(24,_24,_27,_40%)] active:translate-y-[2px] active:scale-[0.97] active:[box-shadow:inset_0px_1px_1px_0px_#18181b,_0px_1px_2px_0px_rgba(24,_24,_27,_30%)] disabled:shadow-none disabled:hover:translate-y-0 disabled:hover:scale-100",
        secondary: "bg-zinc-100 text-zinc-900 hover:bg-zinc-200 [box-shadow:inset_0px_-2px_0px_0px_#d4d4d8,_0px_1px_6px_0px_rgba(161,_161,_170,_58%)] hover:translate-y-[1px] hover:scale-[0.98] hover:[box-shadow:inset_0px_-1px_0px_0px_#d4d4d8,_0px_1px_3px_0px_rgba(161,_161,_170,_40%)] active:translate-y-[2px] active:scale-[0.97] active:[box-shadow:inset_0px_1px_1px_0px_#d4d4d8,_0px_1px_2px_0px_rgba(161,_161,_170,_30%)] disabled:shadow-none disabled:hover:translate-y-0 disabled:hover:scale-100",
        outline: "border border-zinc-300 bg-transparent hover:bg-zinc-50 text-zinc-900 [box-shadow:inset_0px_-2px_0px_0px_#e4e4e7,_0px_1px_6px_0px_rgba(228,_228,_231,_58%)] hover:translate-y-[1px] hover:scale-[0.98] hover:[box-shadow:inset_0px_-1px_0px_0px_#e4e4e7,_0px_1px_3px_0px_rgba(228,_228,_231,_40%)] active:translate-y-[2px] active:scale-[0.97] active:[box-shadow:inset_0px_1px_1px_0px_#e4e4e7,_0px_1px_2px_0px_rgba(228,_228,_231,_30%)] disabled:shadow-none disabled:hover:translate-y-0 disabled:hover:scale-100",
        destructive: "bg-red-500 text-white hover:bg-red-600 [box-shadow:inset_0px_-2px_0px_0px_#dc2626,_0px_1px_6px_0px_rgba(239,_68,_68,_58%)] hover:translate-y-[1px] hover:scale-[0.98] hover:[box-shadow:inset_0px_-1px_0px_0px_#dc2626,_0px_1px_3px_0px_rgba(239,_68,_68,_40%)] active:translate-y-[2px] active:scale-[0.97] active:[box-shadow:inset_0px_1px_1px_0px_#dc2626,_0px_1px_2px_0px_rgba(239,_68,_68,_30%)] disabled:shadow-none disabled:hover:translate-y-0 disabled:hover:scale-100",
        code: "bg-[#36322F] text-white hover:bg-[#4a4542] [box-shadow:inset_0px_-2px_0px_0px_#171310,_0px_1px_6px_0px_rgba(58,_33,_8,_58%)] hover:translate-y-[1px] hover:scale-[0.98] hover:[box-shadow:inset_0px_-1px_0px_0px_#171310,_0px_1px_3px_0px_rgba(58,_33,_8,_40%)] active:translate-y-[2px] active:scale-[0.97] active:[box-shadow:inset_0px_1px_1px_0px_#171310,_0px_1px_2px_0px_rgba(58,_33,_8,_30%)] disabled:shadow-none disabled:hover:translate-y-0 disabled:hover:scale-100",
        orange: "bg-orange-500 text-white hover:bg-orange-600 [box-shadow:inset_0px_-2px_0px_0px_#c2410c,_0px_1px_6px_0px_rgba(234,_88,_12,_58%)] hover:translate-y-[1px] hover:scale-[0.98] hover:[box-shadow:inset_0px_-1px_0px_0px_#c2410c,_0px_1px_3px_0px_rgba(234,_88,_12,_40%)] active:translate-y-[2px] active:scale-[0.97] active:[box-shadow:inset_0px_1px_1px_0px_#c2410c,_0px_1px_2px_0px_rgba(234,_88,_12,_30%)] disabled:shadow-none disabled:hover:translate-y-0 disabled:hover:scale-100",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-8 px-3 py-1.5 text-xs",
        lg: "h-12 px-6 py-3",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/checkbox.tsx
================
'use client'

import * as React from "react"
import { Check } from "lucide-react"
import { cn } from "@/lib/utils"

export interface CheckboxProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string
}

const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(
  ({ className, label, id, ...props }, ref) => {
    const generatedId = React.useId()
    const checkboxId = id || generatedId
    
    return (
      <div className="flex items-center space-x-2">
        <div className="relative">
          <input
            type="checkbox"
            className={cn(
              "peer h-4 w-4 appearance-none rounded border border-zinc-300 bg-white checked:bg-orange-500 checked:border-orange-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-zinc-700 dark:bg-zinc-950 dark:checked:bg-orange-500 dark:checked:border-orange-500",
              className
            )}
            ref={ref}
            id={checkboxId}
            {...props}
          />
          <Check className="absolute left-0 top-0 h-4 w-4 text-white pointer-events-none opacity-0 peer-checked:opacity-100" />
        </div>
        {label && (
          <label
            htmlFor={checkboxId}
            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
          >
            {label}
          </label>
        )}
      </div>
    )
  }
)
Checkbox.displayName = "Checkbox"

export { Checkbox }

================
File: src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root
const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
const DropdownMenuGroup = DropdownMenuPrimitive.Group
const DropdownMenuPortal = DropdownMenuPrimitive.Portal
const DropdownMenuSub = DropdownMenuPrimitive.Sub
const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-zinc-100 data-[state=open]:bg-zinc-100 dark:focus:bg-zinc-800 dark:data-[state=open]:bg-zinc-800",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white p-1 text-zinc-950 shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-zinc-200 bg-white p-1 text-zinc-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-zinc-100 focus:text-zinc-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-zinc-800 dark:focus:text-zinc-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-zinc-100 dark:bg-zinc-800", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"
import { cn } from "@/lib/utils"

export type InputProps = React.InputHTMLAttributes<HTMLInputElement>

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-[10px] border border-zinc-200 bg-white px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-zinc-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:placeholder:text-zinc-400 dark:focus-visible:ring-orange-500 [box-shadow:inset_0px_-2px_0px_0px_#e4e4e7,_0px_1px_4px_0px_rgba(228,_228,_231,_40%)] focus:[box-shadow:inset_0px_-2px_0px_0px_#f97316,_0px_1px_4px_0px_rgba(249,_115,_22,_20%)] disabled:shadow-none",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/label.tsx
================
import * as React from "react"
import { cn } from "@/lib/utils"

export type LabelProps = React.LabelHTMLAttributes<HTMLLabelElement>

const Label = React.forwardRef<HTMLLabelElement, LabelProps>(
  ({ className, ...props }, ref) => {
    return (
      <label
        ref={ref}
        className={cn(
          "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
          className
        )}
        {...props}
      />
    )
  }
)
Label.displayName = "Label"

export { Label }

================
File: src/components/ui/select.tsx
================
'use client'

import * as React from "react"
import { ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils"

export interface SelectProps
  extends React.SelectHTMLAttributes<HTMLSelectElement> {
  placeholder?: string
}

const Select = React.forwardRef<HTMLSelectElement, SelectProps>(
  ({ className, children, placeholder, ...props }, ref) => {
    return (
      <div className="relative">
        <select
          className={cn(
            "flex h-10 w-full appearance-none rounded-[10px] border border-zinc-200 bg-white px-3 py-2 pr-10 text-sm ring-offset-background placeholder:text-zinc-500 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:placeholder:text-zinc-400 dark:focus:ring-orange-500 [box-shadow:inset_0px_-2px_0px_0px_#e4e4e7,_0px_1px_4px_0px_rgba(228,_228,_231,_40%)] focus:[box-shadow:inset_0px_-2px_0px_0px_#f97316,_0px_1px_4px_0px_rgba(249,_115,_22,_20%)] disabled:shadow-none",
            className
          )}
          ref={ref}
          {...props}
        >
          {placeholder && (
            <option value="" disabled>
              {placeholder}
            </option>
          )}
          {children}
        </select>
        <ChevronDown className="absolute right-3 top-3 h-4 w-4 pointer-events-none text-zinc-500" />
      </div>
    )
  }
)
Select.displayName = "Select"

export { Select }

================
File: src/components/ui/textarea.tsx
================
import * as React from "react"
import { cn } from "@/lib/utils"

export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-[10px] border border-zinc-200 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-zinc-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-zinc-800 dark:bg-zinc-950 dark:ring-offset-zinc-950 dark:placeholder:text-zinc-400 dark:focus-visible:ring-orange-500 [box-shadow:inset_0px_-2px_0px_0px_#e4e4e7,_0px_1px_4px_0px_rgba(228,_228,_231,_40%)] focus:[box-shadow:inset_0px_-2px_0px_0px_#f97316,_0px_1px_4px_0px_rgba(249,_115,_22,_20%)] disabled:shadow-none",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: src/components/ApiKeyManager.tsx
================
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Key, Copy, Trash2, Plus } from 'lucide-react'
import { useQuery, useMutation } from "convex/react"
import { api } from "../../convex/_generated/api"

export function ApiKeyManager() {
  const [showNewApiKey, setShowNewApiKey] = useState(false)
  const [newApiKeyName, setNewApiKeyName] = useState('')
  const [createdApiKey, setCreatedApiKey] = useState<string | null>(null)
  const [copiedKeyId, setCopiedKeyId] = useState<string | null>(null)
  
  const apiKeys = useQuery(api.apiKeys.getUserApiKeys) || []
  const createApiKey = useMutation(api.apiKeys.createApiKey)
  const deleteApiKey = useMutation(api.apiKeys.deleteApiKey)
  
  const handleCreateApiKey = async () => {
    if (!newApiKeyName.trim()) return
    
    try {
      const result = await createApiKey({ name: newApiKeyName })
      setCreatedApiKey(result.key)
      setNewApiKeyName('')
      setShowNewApiKey(false)
    } catch (error) {
      console.error('Failed to create API key:', error)
    }
  }
  
  const handleCopyApiKey = (key: string, keyId: string) => {
    navigator.clipboard.writeText(key)
    setCopiedKeyId(keyId)
    setTimeout(() => setCopiedKeyId(null), 2000)
  }
  
  const handleDeleteApiKey = async (keyId: string) => {
    if (!confirm('Are you sure you want to delete this API key?')) return
    
    try {
      await deleteApiKey({ keyId: keyId as any })
    } catch (error) {
      console.error('Failed to delete API key:', error)
    }
  }
  
  return (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <h2 className="text-xl font-semibold mb-4">Your API Keys</h2>
      
      {createdApiKey && (
        <div className="p-4 bg-green-50 border border-green-200 rounded-lg mb-4">
          <h4 className="font-medium text-green-900 mb-2">API Key Created!</h4>
          <p className="text-sm text-green-700 mb-3">Copy it now - you won't see it again!</p>
          <div className="flex gap-2">
            <code className="flex-1 p-2 bg-white border rounded text-xs font-mono break-all">
              {createdApiKey}
            </code>
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                navigator.clipboard.writeText(createdApiKey)
                setCreatedApiKey(null)
              }}
            >
              <Copy className="h-4 w-4 mr-1" />
              Copy
            </Button>
          </div>
        </div>
      )}
      
      <div className="flex items-center justify-between mb-4">
        <p className="text-sm text-gray-600">Use API keys to add websites programmatically</p>
        <Button
          variant="orange"
          size="sm"
          onClick={() => setShowNewApiKey(true)}
          disabled={apiKeys.length >= 5}
        >
          <Plus className="h-4 w-4 mr-1" />
          Create Key
        </Button>
      </div>
      
      {showNewApiKey && (
        <div className="mb-4 p-4 border rounded-lg bg-gray-50">
          <div className="flex gap-2">
            <Input
              placeholder="Key name (e.g., Production)"
              value={newApiKeyName}
              onChange={(e) => setNewApiKeyName(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleCreateApiKey()}
              className="flex-1"
            />
            <Button
              variant="orange"
              size="sm"
              onClick={handleCreateApiKey}
              disabled={!newApiKeyName.trim()}
            >
              Create
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                setShowNewApiKey(false)
                setNewApiKeyName('')
              }}
            >
              Cancel
            </Button>
          </div>
        </div>
      )}
      
      {apiKeys.length > 0 ? (
        <div className="space-y-2">
          {apiKeys.map((key) => (
            <div key={key._id} className="flex items-center justify-between p-3 border rounded-lg">
              <div className="flex-1">
                <div className="font-medium text-sm">{key.name}</div>
                <code className="text-xs text-gray-500 font-mono">{key.keyPreview}</code>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => handleDeleteApiKey(key._id)}
                className="text-red-600 hover:text-red-700"
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-8 text-gray-500">
          <Key className="h-12 w-12 mx-auto mb-3 text-gray-300" />
          <p className="text-sm">No API keys yet</p>
        </div>
      )}
    </div>
  )
}

================
File: src/components/WebhookConfigModal.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { X, Mail, Copy, Check, Network, FileText } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select } from '@/components/ui/select'

interface WebhookConfigModalProps {
  isOpen: boolean
  onClose: () => void
  onSave: (config: {
    notificationPreference: 'none' | 'email' | 'webhook' | 'both'
    webhookUrl?: string
    checkInterval?: number
    monitorType?: 'single_page' | 'full_site'
    crawlLimit?: number
    crawlDepth?: number
  }) => void
  initialConfig?: {
    notificationPreference: 'none' | 'email' | 'webhook' | 'both'
    webhookUrl?: string
    checkInterval?: number
    monitorType?: 'single_page' | 'full_site'
    crawlLimit?: number
    crawlDepth?: number
  }
  websiteName: string
}

export function WebhookConfigModal({ isOpen, onClose, onSave, initialConfig, websiteName }: WebhookConfigModalProps) {
  const [notificationPreference, setNotificationPreference] = useState(initialConfig?.notificationPreference || 'none')
  const [webhookUrl, setWebhookUrl] = useState(initialConfig?.webhookUrl || '')
  const [checkInterval, setCheckInterval] = useState(String(initialConfig?.checkInterval || 60))
  const [monitorType, setMonitorType] = useState(initialConfig?.monitorType || 'single_page')
  const [crawlLimit, setCrawlLimit] = useState(String(initialConfig?.crawlLimit || 5))
  const [crawlDepth, setCrawlDepth] = useState(String(initialConfig?.crawlDepth || 3))
  const [copied, setCopied] = useState(false)

  // Handle escape key
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        onClose()
      }
    }
    
    document.addEventListener('keydown', handleEscape)
    return () => document.removeEventListener('keydown', handleEscape)
  }, [isOpen, onClose])

  if (!isOpen) return null

  const handleSave = () => {
    onSave({
      notificationPreference: notificationPreference as 'none' | 'email' | 'webhook' | 'both',
      webhookUrl: (notificationPreference === 'webhook' || notificationPreference === 'both') ? webhookUrl : undefined,
      checkInterval: parseInt(checkInterval),
      monitorType: monitorType as 'single_page' | 'full_site',
      crawlLimit: monitorType === 'full_site' ? parseInt(crawlLimit) : undefined,
      crawlDepth: monitorType === 'full_site' ? parseInt(crawlDepth) : undefined
    })
  }

  const copyPayloadExample = () => {
    const payload = JSON.stringify({
      event: "website_changed",
      website: {
        name: websiteName,
        url: "https://example.com",
        checkInterval: 60
      },
      change: {
        detectedAt: new Date().toISOString(),
        changeType: "content_modified",
        summary: "Page content has changed",
        diff: {
          added: ["New paragraph added", "Updated heading"],
          removed: ["Old footer text"]
        }
      },
      scrapeResult: {
        title: "Example Website",
        description: "Website description",
        markdown: "# Page Content\\n\\nThis is the scraped content..."
      }
    }, null, 2)

    navigator.clipboard.writeText(payload)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold">Website Settings</h2>
          <Button
            variant="outline"
            size="sm"
            onClick={onClose}
            className="w-8 h-8 p-0"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>

        <div className="space-y-6">
          {/* Monitoring Configuration */}
          <div className="border-b pb-6">
            <h3 className="text-lg font-medium mb-4">Monitoring Configuration</h3>
            
            {/* Check Interval */}
            <div className="mb-4">
              <Label htmlFor="check-interval">Check Interval</Label>
              <Select
                id="check-interval"
                value={checkInterval}
                onChange={(e) => setCheckInterval(e.target.value)}
                className="w-full mt-1"
              >
                <option value="0.25">15 seconds (Testing only)</option>
                <option value="5">5 minutes</option>
                <option value="15">15 minutes</option>
                <option value="30">30 minutes</option>
                <option value="60">1 hour</option>
                <option value="180">3 hours</option>
                <option value="360">6 hours</option>
                <option value="720">12 hours</option>
                <option value="1440">24 hours</option>
                <option value="4320">3 days</option>
                <option value="10080">7 days</option>
              </Select>
            </div>

            {/* Monitor Type */}
            <div className="mb-4">
              <Label htmlFor="monitor-type">Monitor Type</Label>
              <div className="grid grid-cols-2 gap-2 mt-1">
                <button
                  type="button"
                  onClick={() => setMonitorType('single_page')}
                  className={`p-3 rounded-lg border-2 transition-all ${
                    monitorType === 'single_page'
                      ? 'border-orange-500 bg-orange-50'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <FileText className={`h-5 w-5 mx-auto mb-1 ${
                    monitorType === 'single_page' ? 'text-orange-600' : 'text-gray-500'
                  }`} />
                  <span className={`text-sm font-medium ${
                    monitorType === 'single_page' ? 'text-orange-900' : 'text-gray-700'
                  }`}>Single Page</span>
                </button>
                
                <button
                  type="button"
                  onClick={() => setMonitorType('full_site')}
                  className={`p-3 rounded-lg border-2 transition-all ${
                    monitorType === 'full_site'
                      ? 'border-orange-500 bg-orange-50'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <Network className={`h-5 w-5 mx-auto mb-1 ${
                    monitorType === 'full_site' ? 'text-orange-600' : 'text-gray-500'
                  }`} />
                  <span className={`text-sm font-medium ${
                    monitorType === 'full_site' ? 'text-orange-900' : 'text-gray-700'
                  }`}>Full Site</span>
                </button>
              </div>
              <p className="text-sm text-gray-500 mt-2">
                {monitorType === 'single_page' 
                  ? 'Monitor changes on a specific page URL' 
                  : 'Crawl and monitor multiple pages across the entire website'}
              </p>
            </div>

            {/* Crawl Configuration */}
            {monitorType === 'full_site' && (
              <div className="space-y-4 mt-4 p-4 bg-gray-50 rounded-lg">
                <div>
                  <Label htmlFor="crawl-limit">Maximum Pages to Crawl</Label>
                  <Input
                    id="crawl-limit"
                    type="number"
                    min="1"
                    max="1000"
                    value={crawlLimit}
                    onChange={(e) => setCrawlLimit(e.target.value)}
                    className="mt-1"
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    Limit the number of pages to crawl (default: 5)
                  </p>
                </div>
                
                <div>
                  <Label htmlFor="crawl-depth">Maximum Crawl Depth</Label>
                  <Input
                    id="crawl-depth"
                    type="number"
                    min="1"
                    max="10"
                    value={crawlDepth}
                    onChange={(e) => setCrawlDepth(e.target.value)}
                    className="mt-1"
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    How many levels deep to crawl from the starting page (default: 3)
                  </p>
                </div>
              </div>
            )}
          </div>

          {/* Notification Type Selection */}
          <div>
            <Label htmlFor="notification-type">Notification Type</Label>
            <Select
              id="notification-type"
              value={notificationPreference}
              onChange={(e) => setNotificationPreference(e.target.value as 'none' | 'email' | 'webhook' | 'both')}
              className="w-full mt-1"
            >
              <option value="none">No notifications</option>
              <option value="email">Email only</option>
              <option value="webhook">Webhook only</option>
              <option value="both">Email and Webhook</option>
            </Select>
          </div>

          {/* Email Configuration Info */}
          {(notificationPreference === 'email' || notificationPreference === 'both') && (
            <div className="p-4 bg-orange-50 border border-orange-200 rounded-lg">
              <div className="flex items-start gap-3">
                <Mail className="h-5 w-5 text-orange-600 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-orange-900">Email Notifications</p>
                  <p className="text-sm text-orange-700 mt-1">
                    Configure your email address in the <a href="/settings" className="underline font-medium">settings page</a> to receive change notifications.
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Webhook Configuration */}
          {(notificationPreference === 'webhook' || notificationPreference === 'both') && (
            <div className="space-y-4">
              <div>
                <Label htmlFor="webhook-url">Webhook URL</Label>
                <Input
                  id="webhook-url"
                  type="url"
                  placeholder="https://your-server.com/webhook"
                  value={webhookUrl}
                  onChange={(e) => setWebhookUrl(e.target.value)}
                  className="mt-1"
                />
                <p className="text-sm text-gray-500 mt-1">
                  We&apos;ll send a POST request to this URL when changes are detected
                </p>
              </div>

              {/* Webhook Payload Example */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <Label>Webhook Payload Example</Label>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={copyPayloadExample}
                    className="text-xs"
                  >
                    {copied ? (
                      <>
                        <Check className="h-3 w-3 mr-1" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="h-3 w-3 mr-1" />
                        Copy
                      </>
                    )}
                  </Button>
                </div>
                <div className="bg-gray-900 text-gray-100 rounded-lg p-4 overflow-x-auto">
                  <pre className="text-xs">
                    <code>{`{
  "event": "website_changed",
  "website": {
    "name": "${websiteName}",
    "url": "https://example.com",
    "checkInterval": 60
  },
  "change": {
    "detectedAt": "${new Date().toISOString()}",
    "changeType": "content_modified",
    "summary": "Page content has changed",
    "diff": {
      "added": ["New paragraph added", "Updated heading"],
      "removed": ["Old footer text"]
    }
  },
  "scrapeResult": {
    "title": "Example Website",
    "description": "Website description",
    "markdown": "# Page Content\\n\\nThis is the scraped content..."
  }
}`}</code>
                  </pre>
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="flex justify-end gap-3 mt-6">
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button variant="orange" onClick={handleSave}>
            Save Settings
          </Button>
        </div>
      </div>
    </div>
  )
}

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# JWT keys
jwt-key*.txt

# Claude files
CLAUDE.md

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "firecrawl-observer",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "npm-run-all --parallel dev:frontend dev:backend",
    "dev:frontend": "next dev --turbopack",
    "dev:backend": "convex dev",
    "build": "next build && convex deploy",
    "start": "next start",
    "lint": "next lint",
    "convex:dev": "convex dev",
    "convex:deploy": "convex deploy",
    "convex:logs": "convex logs"
  },
  "dependencies": {
    "@auth/core": "^0.37.4",
    "@convex-dev/auth": "^0.0.87",
    "@mendable/firecrawl-js": "^1.29.1",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-slot": "^1.2.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "convex": "^1.25.2",
    "lucide-react": "^0.525.0",
    "next": "15.3.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.3.5",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5"
  },
  "description": "A comprehensive style guide and design system for Firecrawl projects built with Next.js.",
  "main": "index.js",
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "module"
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;

================
File: README.md
================
# Firecrawl Observer

Monitor websites for changes using Firecrawl. Get notified when content updates.

Built with Next.js, Convex, and Firecrawl API. Track website changes with customizable intervals, view visual diffs, and export content as markdown.

## Setup

1. Clone and install:
```bash
git clone https://github.com/mendableai/firecrawl-observer.git
cd firecrawl-observer
pnpm install
```

2. Set up Convex (follow the prompts):
```bash
npx convex dev
```

3. Create `.env.local`:
```env
NEXT_PUBLIC_CONVEX_URL=https://your-project.convex.cloud
```

4. Add your Firecrawl API key to Convex:
```bash
npx convex env set FIRECRAWL_API_KEY your_api_key_here
```

5. Run:
```bash
pnpm dev
```

Visit [http://localhost:3000](http://localhost:3000)

## Features

- Track unlimited websites
- Custom check intervals
- Visual diff viewer
- Download content as markdown
- Email/password auth

## Deploy

```bash
# Deploy Convex
npx convex deploy

# Deploy to Vercel
vercel
```

Add `NEXT_PUBLIC_CONVEX_URL` to your Vercel environment variables.

## License

MIT

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  darkMode: "class",
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {
        sans: ["var(--font-inter)", "ui-sans-serif", "system-ui", "sans-serif"],
        mono: ["ui-monospace", "SFMono-Regular", "monospace"],
      },
      keyframes: {
        "slide-up": {
          "0%": {
            transform: "translateY(20px)",
            opacity: "0",
          },
          "100%": {
            transform: "translateY(0)",
            opacity: "1",
          },
        },
      },
      animation: {
        "slide-up": "slide-up 0.5s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
